
package com.usman.bank.constants;

import com.usman.bank.constants.Constants.ORACLE_SCHEMAS;
import com.usman.bank.constants.Constants.TRANSFER_TYPES;

//import com.as.utils.Constants.DATA_SOURCES;
//import com.as.utils.Constants.ORACLE_SCHEMAS;
//import com.as.utils.Constants.TRANSFER_TYPES;

/**
 * This classs is used for defining DB constants and SQL for
 * INSERT/UPDATE/DELETE into the database and SELECT
 * 
 * @author Joe Math
 * @version 1.0
 * @since 27-Sep-2011
 */

public class UsmanDBConstants {
	// public static final String BBYN_DATASOURCE = DATA_SOURCES.BBYN_DATASOURCE;
	public static final String IMAL_NO_RESULTS_FOUND = "No Result Found";

	/* Joe Math 27-Sep-2011 For EServices */
	public static class Eservice {
		private Eservice() {
			throw new IllegalStateException("Eservice class");
		}

		public static final String TABLE_CUSTS_APPLICATIONS = "CUSTS_APPLICATIONS";
		public static final String TABLE_CUST_APPS_APPLY_FOR_CERT = "CUST_APPS_APPLY_FOR_CERT";
		public static final String TABLE_CUST_APPS_APPLY_FOR_CHEQUE = "CUST_APPS_APPLY_FOR_CHEQUE";
		public static final String TABLE_CUST_APPS_BLOCK_CARD = "CUST_APPS_BLOCK_CARD";
		public static final String TABLE_CUST_APPS_TRNSFR_LIMIT = "CUST_APPS_TRNSFR_LIMIT";
		public static final String APP_ID_SEQ = "APP_ID_SEQ";
		public static final String TABLE_CHEQUE_SEQUENCE = "APP_ID_CHEQUE_SEQ";
		public static final String TABLE_CERT_SEQUENCE = "APP_ID_CERT_SEQ";
		public static final String TABLE_BLOCK_CARD_SEQUENCE = "APP_ID_BLOCK_CARD_SEQ";
		public static final String TABLE_TRNSFR_LIMIT_SEQUENCE = "APP_ID_CHG_LIMIT_SEQ";
		public static final String INSERT_CHEQUE = "INSERT INTO CUST_APPS_APPLY_FOR_CHEQUE(APP_ID,CUST_ID,CUSTOMER_NAME,APP_TYPE_ID,APP_STATUS_ID,ASSIGNED_TO_EMP_ID,BANK_ID,ACCOUNT_NUMBER,PREFERRED_LANGUAGE,TOTAL_CHEQ_BOOK,TOTAL_LEAVE_PER_BOOK,URGENT_CHEQUE_BOOK,CREATED_DATE,MODIFIED_DATE,APP_REF_NO, ADDRESSED_TO) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		public static final String INSERT_CERTIFICATE = "INSERT INTO CUST_APPS_APPLY_FOR_CERT(APP_ID,CUST_ID,CUSTOMER_NAME,APP_TYPE_ID,APP_STATUS_ID,ASSIGNED_TO_EMP_ID,BANK_ID,ACCOUNT_NUMBER,CERTIFICATE_TYPE_ID,PREFERRED_LANGUAGE,ADDRESSED_TO,STANDARD_CHARGE,CREATED_DATE,MODIFIED_DATE,APP_REF_NO) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		public static final String INSERT_BLOCK_CARD = "INSERT INTO CUST_APPS_BLOCK_CARD(APP_ID,CUST_ID,CUSTOMER_NAME,APP_TYPE_ID,APP_STATUS_ID,ASSIGNED_TO_EMP_ID,BANK_ID,CARD_NUMBER,REASON_TYPE_ID,MEMO,CREATED_DATE,MODIFIED_DATE,APP_REF_NO) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
		public static final String INSERT_TRNSFR_LIMIT = "INSERT INTO CUST_APPS_TRNSFR_LIMIT(APP_ID,CUST_ID,CUSTOMER_NAME,APP_TYPE_ID,APP_STATUS_ID,ASSIGNED_TO_EMP_ID,BANK_ID,TRANSFER_TYPE_ID,LIMIT_TYPE_ID,LIMIT_AMOUNT,FC_LIMIT_AMOUNT,CREATED_DATE,MODIFIED_DATE,APP_REF_NO) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		public static final String SELECT_CHEQUE_REQUEST_BY_ID = "SELECT A.CREATED_DATE, B.APP_TYPE_NAME_EN, A.APP_REF_NO, C.APP_STATUS_NAME_EN FROM CUST_APPS_APPLY_FOR_CHEQUE A, APP_APPLICATION_TYPES B, APP_APPLICATION_STATUS_TYPES C WHERE A.APP_TYPE_ID = B.APP_TYPE_ID AND A.APP_STATUS_ID=C.APP_STATUS_ID AND A.CUST_ID=?";
		public static final String SELECT_CERTIFICATE_REQUEST_BY_ID = "SELECT A.CREATED_DATE, B.APP_TYPE_NAME_EN, A.APP_REF_NO, C.APP_STATUS_NAME_EN FROM CUST_APPS_APPLY_FOR_CERT A, APP_APPLICATION_TYPES B, APP_APPLICATION_STATUS_TYPES C WHERE A.APP_TYPE_ID = B.APP_TYPE_ID AND A.APP_STATUS_ID=C.APP_STATUS_ID AND A.CUST_ID=?";
		public static final String SELECT_BLOCK_CARD_REQUEST_BY_ID = "SELECT A.CREATED_DATE, B.APP_TYPE_NAME_EN, A.APP_REF_NO, C.APP_STATUS_NAME_EN FROM CUST_APPS_BLOCK_CARD A, APP_APPLICATION_TYPES B, APP_APPLICATION_STATUS_TYPES C WHERE A.APP_TYPE_ID = B.APP_TYPE_ID AND A.APP_STATUS_ID=C.APP_STATUS_ID AND A.CUST_ID=?";
		public static final String SELECT_TRNSFR_LIMIT_REQUEST_BY_ID = "SELECT A.CREATED_DATE, B.APP_TYPE_NAME_EN, A.APP_REF_NO, C.APP_STATUS_NAME_EN FROM CUST_APPS_TRNSFR_LIMIT A, APP_APPLICATION_TYPES B, APP_APPLICATION_STATUS_TYPES C WHERE A.APP_TYPE_ID = B.APP_TYPE_ID AND A.APP_STATUS_ID=C.APP_STATUS_ID AND A.CUST_ID=?";
	}

	/* Joe Math 27-Sep-2011 For EServices */
	/* Joe Math 28-Oct-2011 For Payments */
	public static class Payments {
		private Payments() {
			throw new IllegalStateException("Payments class");
		}

		public static final String TABLE_CUST_PAYEES = "CUST_PAYEES";
		public static final String TABLE_CUST_PAYEES_SEQUENCE = "CUST_PAYEE_ID_SEQ";
		public static final String TABLE_CUSTS_MASTER_TRANSACTIONS = "CUSTS_MASTER_TRANSACTIONS";
		public static final String TABLE_CUSTS_MASTER_TRANSACTIONS_SEQUENCE = "CUST_TRANSACTION_ID_SEQ";
		public static final String TABLE_CUSTS_MASTER_TRANSACTIONS_CONF_SEQUENCE = "CONFIRMATION_NUMBER_SEQ";
		public static final int PAYEE_STATUS_ACTIVE_ID = 100;
		public static final int PAYEE_STATUS_INACTIVE_ID = 101;
		public static final int PAYEE_STATUS_DELTED_ID = 102;
		public static final String INSERT_NEW_BILL_PAYEE = "INSERT INTO CUST_PAYEES(CUST_PAYEE_ID,PAYEE_NAME_EN,PAYEE_STATUS_ID,CUST_ID,GLOBAL_PAYEE_ID) VALUES (?,?,?,?,?)";
		public static final String INSERT_BILL_PAYEE_FIELDS = "INSERT INTO CUST_PAYEES_FIELDS(CUST_PAYEE_ID,FIELD_ID,FIELD_VALUE,RECORD_STATUS) VALUES (?,?,?,?)";
		public static final String SELECT_CUST_PAYEE = "SELECT A.CUST_PAYEE_ID AS CUST_PAYEE_ID, A.GLOBAL_PAYEE_ID AS GLOBAL_PAYEE_ID, B.PAYEE_NAME_EN AS GLOBAL_PAYEE,B.PAYEE_ACCOUNT AS GLOBAL_PAYEE_ACCOUNT, A.PAYEE_NAME_EN AS CUST_PAYEE, A.PAYEE_ACCOUNT,B.MAX_AMOUNT,B.MIN_AMOUNT FROM CUST_PAYEES A, PAYEE_GLOBAL_PAYEES B WHERE A.GLOBAL_PAYEE_ID=B.GLOBAL_PAYEE_ID AND A.PAYEE_STATUS_ID=100 AND A.CUST_ID = ? ORDER BY A.CUST_PAYEE_ID DESC";
		public static final String SELECT_CUST_PAYEE_EDIT = "SELECT A.CUST_PAYEE_ID AS CUST_PAYEE_ID, A.GLOBAL_PAYEE_ID AS GLOBAL_PAYEE_ID, B.PAYEE_NAME_EN AS GLOBAL_PAYEE, A.PAYEE_NAME_EN AS CUST_PAYEE, A.PAYEE_ACCOUNT FROM CUST_PAYEES A, PAYEE_GLOBAL_PAYEES B WHERE A.GLOBAL_PAYEE_ID=B.GLOBAL_PAYEE_ID AND A.PAYEE_STATUS_ID = ? AND A.CUST_PAYEE_ID = ? AND A.CUST_ID = ?";
		public static final String UPDATE_CUST_PAYEE = "UPDATE CUST_PAYEES SET PAYEE_NAME_EN= ?, PAYEE_STATUS_ID=?  WHERE CUST_PAYEE_ID = ?";
		public static final String UPDATE_CUST_PAYEE_FIELDS = "UPDATE CUST_PAYEES_FIELDS SET FIELD_VALUE= ?,RECORD_STATUS=? WHERE FIELD_ID = ? AND CUST_PAYEE_ID=?";
		public static final String INSERT_PAYMENT_TRANSACTION = "INSERT INTO CUSTS_MASTER_TRANSACTIONS (CUST_TRANS_ID,BANK_ID,CHANNEL_ID,CIF,TRANSFER_AMOUNT_IN_KD,FROM_ACCOUNT_ID,TO_ACCOUNT_ID,TRANSFER_CURRENCY_ID,TRANSFER_TYPE_ID,CREATED_DATE,POSTED_DATE,TRANSFER_STATUS_TYPE_ID,CONFIRMATION_NUMBER,AMOUNT)VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

		public static final String SELECT_BILL_PAYMENT_HISTORY = new StringBuilder(
				"SELECT v.rounded_amount,V.CURRENCY_NAME_EN,V.CREATED_DATE,V.TRANSFER_AMOUNT_IN_KD,V.FROM_ACCOUNT_ID,V.AMOUNT,P.PAYEE_NAME_EN,P.PAYEE_NAME_AR FROM V_CUST_ALL_TRANSACTIONS V INNER JOIN PAYEE_GLOBAL_PAYEES P ON V.TO_ACCOUNT_ID = P.PAYEE_ACCOUNT WHERE P.PAYEE_TYPE_ID = 2  and V.TRANSFER_TYPE_ID =")
						.append(Constants.TRANSFER_TYPES.TRANSFER_BILL_PAYMENT_ID).toString();

		public static final String SELECT_CHARITY_PAYMENT_HISTORY = new StringBuilder(
				"SELECT v.rounded_amount,V.CURRENCY_NAME_EN,V.CREATED_DATE,V.FROM_ACCOUNT_ID,V.TRANSFER_AMOUNT_IN_KD,V.AMOUNT,P.PAYEE_NAME_EN,P.PAYEE_NAME_AR FROM V_CUST_ALL_TRANSACTIONS V INNER JOIN PAYEE_GLOBAL_PAYEES P ON V.TO_ACCOUNT_ID = P.PAYEE_ACCOUNT  WHERE P.PAYEE_TYPE_ID = 3 AND V.TRANSFER_TYPE_ID =")
						.append(Constants.TRANSFER_TYPES.TRANSFER_CHARITY_PAYMENT_ID).toString();

		public static final String SELECT_CREDITCARD_PAYMENT_HISTORY = new StringBuilder(
				"SELECT rounded_amount,TRANSFER_AMOUNT_IN_KD,AMOUNT,FROM_ACCOUNT_ID,SUBSTR(TO_ACCOUNT_ID,1,6) || 'XXXXXXX' || SUBSTR(TO_ACCOUNT_ID,13,16) AS TO_ACCOUNT_ID,CREATED_DATE,TRANSFER_STATUS_TYPE_NAME_EN,CURRENCY_NAME_EN FROM V_CUST_ALL_TRANSACTIONS WHERE TRANSFER_TYPE_ID =")
						.append(Constants.TRANSFER_TYPES.TRANSFER_CREDIT_CARD_ID).toString();
		public static final String SELECT_BILL_PAYEE_FIELDS = "SELECT * CUST_PAYEES_FIELDS where GLOBAL_PAYEE_ID = ?";

		public static final String SELECT_PAYEE_FIELDS_DETAILS = "SELECT CP.FIELD_ID,CP.FIELD_VALUE,PGF.FIELD_NAME_EN,PGF.FIELD_NAME_AR,PGF.IS_VISIBLE, PGF.IS_MANDATORY,PGF.FIELD_LENGTH,PGF.VALIDATE_CIVIL_ID,PGF.START_WITH FROM CUST_PAYEES_FIELDS CP INNER JOIN PAYEE_GLOBAL_PAYEES_FIELDS PGF ON CP.FIELD_ID = PGF.FIELD_ID  WHERE CUST_PAYEE_ID=?";

		public static final String ENET_GIFT_CARD_FIELD = "REPLACE(SUBSTR(COMMENTS,INSTR(COMMENTS, 'VCHR:'  ) +5), ')' ,'' )";

		public static final String ENET_REFERENCE_NUMBER_FIELD = "SUBSTR(REPLACE(COMMENTS, ' ', ''), INSTR(REPLACE(COMMENTS, ' ', ''), 'REF:'  ) + 4 , INSTR(REPLACE(COMMENTS, ' ', ''), ')'  ) - INSTR(REPLACE(COMMENTS, ' ', ''), 'REF:'  ) - 4  )";

		public static final String INSERT_DUPLICATE_CHECK_PROC = " { call BBYNIB.SAVE_CUSTS_REQUESTS (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) } ";

		public static final String SELECT_ITUNES_PAYMENT_HISTORY = new StringBuilder(
				"SELECT cust_trans_id,rounded_amount,TRANSFER_AMOUNT_IN_KD,AMOUNT,FROM_ACCOUNT_ID,TO_ACCOUNT_ID AS TO_ACCOUNT_ID,CREATED_DATE,TRANSFER_STATUS_TYPE_NAME_EN,CURRENCY_NAME_EN, COMMENTS AS comments, ")
						.append(ENET_GIFT_CARD_FIELD).append("  AS GIFT_CARD_NO, ").append(ENET_REFERENCE_NUMBER_FIELD)
						.append(" AS REF_NO FROM V_CUST_ALL_TRANSACTIONS WHERE TRANSFER_TYPE_ID =")
						.append(Constants.TRANSFER_TYPES.ITUNES_GIFT_CARD_ID).toString();

		public static final String SELECT_E_NET_PAYMENT_HISTORY = new StringBuilder(
				"SELECT cust_trans_id,rounded_amount,TRANSFER_AMOUNT_IN_KD,AMOUNT,FROM_ACCOUNT_ID,TO_ACCOUNT_ID AS TO_ACCOUNT_ID,CREATED_DATE,TRANSFER_STATUS_TYPE_NAME_EN,CURRENCY_NAME_EN, COMMENTS AS comments, ")
						.append(ENET_GIFT_CARD_FIELD).append("  AS CARD_NO, ").append(ENET_REFERENCE_NUMBER_FIELD)
						.append(" AS REF_NO FROM V_CUST_ALL_TRANSACTIONS WHERE TRANSFER_TYPE_ID IN ")
						.append(" ( " + TRANSFER_TYPES.NINTENDO_PAYMENT + ", " + TRANSFER_TYPES.BEIN_SPORT_PAYMENT
								+ ", " + TRANSFER_TYPES.XBOX_PAYMENT + ", " + TRANSFER_TYPES.PLAYSTATION_PAYMENT + ", "
								+ TRANSFER_TYPES.GCC_PAYMENT + " ) ")
						.toString();

		public static final String SELECT_GOOGLE_PLAY_PAYMENT_HISTORY = new StringBuilder(
				"SELECT cust_trans_id,rounded_amount,TRANSFER_AMOUNT_IN_KD,AMOUNT,FROM_ACCOUNT_ID,TO_ACCOUNT_ID AS TO_ACCOUNT_ID,CREATED_DATE,TRANSFER_STATUS_TYPE_NAME_EN,CURRENCY_NAME_EN, COMMENTS AS comments, ")
						.append(ENET_GIFT_CARD_FIELD).append(" AS GIFT_CARD_NO, ").append(ENET_REFERENCE_NUMBER_FIELD)
						.append(" AS REF_NO  FROM V_CUST_ALL_TRANSACTIONS WHERE TRANSFER_TYPE_ID =")
						.append(Constants.TRANSFER_TYPES.GOOGLE_PLAY_GIFT_CARD_ID).toString();

		public static final String SELECT_SCHOOL_PAYMENT_HISTORY = new StringBuilder(
				"SELECT v.CUST_TRANS_ID,v.rounded_amount,V.CURRENCY_NAME_EN,V.CREATED_DATE,V.TRANSFER_AMOUNT_IN_KD,V.FROM_ACCOUNT_ID,V.AMOUNT,P.PAYEE_NAME_EN,P.PAYEE_NAME_AR,V.COMMENTS AS COMMENTS FROM V_CUST_ALL_TRANSACTIONS V INNER JOIN PAYEE_GLOBAL_PAYEES P ON V.TO_ACCOUNT_ID = P.PAYEE_ACCOUNT WHERE P.PAYEE_TYPE_ID = 4  and V.TRANSFER_TYPE_ID =")
						.append(Constants.TRANSFER_TYPES.SCHOOL_PAYMENT_TRANSFER_ID).toString();

	}

	/* Joe Math 02-Nov-2011 For Transfer Types */

	public static class TransferTypes {
		private TransferTypes() {
			throw new IllegalStateException("TransferTypes class");
		}

		public static final int TRANSFER_ALL_TRANSFER_ID = 100;
		public static final String TRANSFER_ALL_TRANSFER = "All Transfers";
		public static final int TRANSFER_MY_ACCOUNT_ID = 101;
		public static final String TRANSFER_MY_ACCOUNT = "TRANSFER_MY_ACCOUNT";
		public static final int TRANSFER_usman_ACCOUNT_ID = 102;
		public static final String TRANSFER_usman_ACCOUNT = "TRANSFER_usman_ACCOUNT";
		public static final int TRANSFER_LOCAL_BANK_ID = 103;
		public static final String TRANSFER_LOCAL_BANK = "TRANSFER_LOCAL_BANK";
		public static final int TRANSFER_INTERNATIONAL_BANK_ID = 104;
		public static final String TRANSFER_INTERNATIONAL_BANK = "TRANSFER_INTERNATIONAL";
		public static final int TRANSFER_CREDIT_CARD_ID = 105;
		public static final String TRANSFER_CREDIT_CARD = "TRANSFER_CREDIT_CARD";
		public static final int TRANSFER_BILL_PAYMENT_ID = 106;
		public static final String TRANSFER_BILL_PAYMENT = "TRANSFER_BILL_PAYMENT";
		public static final int TRANSFER_QUICK_BILL_PAYMENT_ID = 107;
		public static final String TRANSFER_QUICK_BILL_PAYMENT = "TRANSFER_QUICK_BILL_PAYMENT";
		public static final int TRANSFER_ISLAMIC_PAYMENT_ID = 108;
		public static final String TRANSFER_ISLAMIC_PAYMENT = "TRANSFER_ISLAMIC_PAYMENT";
		public static final int TRANSFER_CARD_TO_ACCOUNT_ID = 142;
		public static final String TRANSFER_CARD_TO_ACCOUNT = "TRANSFER_CARD_TO_ACCOUNT";
	}

	/* Joe Math 02-Nov-2011 For Transfer Types */

	public static class ApplicationType {
		private ApplicationType() {
			throw new IllegalStateException("ApplicationType class");
		}

		public static final String TABLE_NAME = "APP_APPLICATION_TYPES";
		public static final String BPM_TABLE = "APP_APPLICATION_TYPES_BPM";
		public static final String TABLE_APP_ASSIG_EMP_TO_APP_TYPES = "APP_ASSIG_EMP_TO_APP_TYPES";
		public static final String TABLE_APP_ASSIG_EMP_TO_APP_TYPES_BPM = "APP_ASSIG_EMP_TO_APP_TYPES_BPM";

		public static final String TABLE_SEQUENCE = "APP_TYPE_ID_SEQ";
		public static final String INSERT = "INSERT INTO APP_APPLICATION_TYPES (APP_TYPE_ID, APP_TYPE_NAME_EN, APP_TYPE_NAME_AR, AUTO_REPLY, SUBJECT, DESCRIPTION, REPLY_MESSAGE, FROM_MSG_CENTER) VALUES (?,?,?,?,?,?,?,?)";
		public static final String SELECT = "SELECT APP_TYPE_ID , APP_TYPE_NAME_EN , APP_TYPE_NAME_AR , AUTO_REPLY , SUBJECT , DESCRIPTION , REPLY_MESSAGE , FROM_MSG_CENTER FROM APP_APPLICATION_TYPES WHERE 1 = 1 ORDER BY APP_TYPE_NAME_EN";
		public static final String SELECT_BY_APP_TYPE_ID = "SELECT APP_TYPE_ID , APP_TYPE_NAME_EN , APP_TYPE_NAME_AR , AUTO_REPLY , SUBJECT , DESCRIPTION , REPLY_MESSAGE , FROM_MSG_CENTER, CREATED_DATE, CREATED_BY_EMP_ID, OPERATION_TYPE, RECORD_STATUS, ACTIONED_BY_EMP_ID, ACTION_DATE, STORAGE_TYPE FROM APP_APPLICATION_TYPES WHERE APP_TYPE_ID = ? ORDER BY APP_TYPE_NAME_EN";
		public static final String UPDATE = "UPDATE APP_APPLICATION_TYPES SET APP_TYPE_NAME_EN = ?, APP_TYPE_NAME_AR = ?, AUTO_REPLY = ?, SUBJECT = ?, DESCRIPTION = ?, REPLY_MESSAGE = ?, FROM_MSG_CENTER = ? WHERE APP_TYPE_ID = ?";

		public static final String INSERT_APPLICATION_TYPE = "INSERT INTO APP_APPLICATION_TYPES (APP_TYPE_ID, APP_TYPE_NAME_EN, APP_TYPE_NAME_AR, AUTO_REPLY, SUBJECT, DESCRIPTION, REPLY_MESSAGE, FROM_MSG_CENTER, CREATED_DATE, CREATED_BY_EMP_ID, OPERATION_TYPE, RECORD_STATUS, ACTIONED_BY_EMP_ID, ACTION_DATE, STORAGE_TYPE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

		public static final String INSERT_APPLICATION_TYPE_BPM = "INSERT INTO APP_APPLICATION_TYPES_BPM (APP_TYPE_ID, APP_TYPE_NAME_EN, APP_TYPE_NAME_AR, AUTO_REPLY, SUBJECT, DESCRIPTION, REPLY_MESSAGE, FROM_MSG_CENTER, CREATED_DATE, CREATED_BY_EMP_ID, OPERATION_TYPE, RECORD_STATUS, ACTIONED_BY_EMP_ID, ACTION_DATE, STORAGE_TYPE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

		public static final String UPDATE_APPLICATION_TYPE = "UPDATE APP_APPLICATION_TYPES SET APP_TYPE_NAME_EN = ?, APP_TYPE_NAME_AR = ?, AUTO_REPLY = ?, SUBJECT = ?, DESCRIPTION = ?, REPLY_MESSAGE = ?, FROM_MSG_CENTER = ?, CREATED_DATE = ?, CREATED_BY_EMP_ID = ? , OPERATION_TYPE = ?, RECORD_STATUS = ?   WHERE APP_TYPE_ID = ? AND STORAGE_TYPE = ?";

		public static final String UPDATE_APPLICATION_TYPE_BPM = "UPDATE APP_APPLICATION_TYPES_BPM SET APP_TYPE_NAME_EN = ?, APP_TYPE_NAME_AR = ?, AUTO_REPLY = ?, SUBJECT = ?, DESCRIPTION = ?, REPLY_MESSAGE = ?, FROM_MSG_CENTER = ?,  CREATED_DATE = ?, CREATED_BY_EMP_ID = ? , OPERATION_TYPE = ?, RECORD_STATUS = ?  WHERE APP_TYPE_ID = ? AND STORAGE_TYPE = ?";

		public static final String UPDATE_STATUS_APPLICATION_TYPE_BPM = " UPDATE APP_APPLICATION_TYPES_BPM SET RECORD_STATUS = ?,ACTIONED_BY_EMP_ID = ?,ACTION_DATE = SYSDATE  WHERE APP_TYPE_ID = ? AND RECORD_STATUS = ? ";

		public static final String UPDATE_STATUS_EMPLOYEES_TO_APPLICATION_TYPES_BPM = " UPDATE APP_ASSIG_EMP_TO_APP_TYPES_BPM SET RECORD_STATUS = ?,ACTIONED_BY_EMP_ID = ?,ACTION_DATE = SYSDATE  WHERE APP_TYPE_ID = ? AND RECORD_STATUS = ? ";

		public static final String INSERT_ASSIGN_APPLICATION_TYPE = "INSERT INTO APP_ASSIG_EMP_TO_APP_TYPES (APP_TYPE_ID,EMPLOYEE_ID,OPERATION_TYPE,RECORD_STATUS,CREATED_DATE,ACTIONED_BY_EMP_ID,CREATED_BY_EMP_ID,ACTION_DATE,STORAGE_TYPE) values (?,?,?,?,?,?,?,?,?)";

		public static final String INSERT_ASSIGN_APPLICATION_TYPE_BPM = "INSERT INTO APP_ASSIG_EMP_TO_APP_TYPES_BPM (APP_TYPE_ID,EMPLOYEE_ID,OPERATION_TYPE,RECORD_STATUS,CREATED_DATE,ACTIONED_BY_EMP_ID,CREATED_BY_EMP_ID,ACTION_DATE,STORAGE_TYPE) values (?,?,?,?,?,?,?,?,?)";

		public static final String SQL_INSERT_ASSIGN_APP_TYPE = "INSERT INTO TABLE_NAME (APP_TYPE_ID,EMPLOYEE_ID,OPERATION_TYPE,RECORD_STATUS,CREATED_DATE,ACTIONED_BY_EMP_ID,CREATED_BY_EMP_ID,ACTION_DATE,STORAGE_TYPE) values (?,?,?,?,?,?,?,?,?)";

		public static final String DELETE_ASSIGN_APPLICATION_TYPE = "DELETE APP_ASSIG_EMP_TO_APP_TYPES WHERE APP_TYPE_ID=? AND STORAGE_TYPE=?";

		public static final String DELETE_ASSIGN_APPLICATION_TYPE_BPM = "DELETE APP_ASSIG_EMP_TO_APP_TYPES_BPM WHERE APP_TYPE_ID=? AND STORAGE_TYPE=?";

		public static final String DELETE_APPLICATION_TYPE_BPM = "DELETE APP_APPLICATION_TYPES_BPM WHERE APP_TYPE_ID=? AND STORAGE_TYPE=? ";

		public static final String SELECT_APPLICATION_TYPES_BPM = "SELECT * FROM APP_APPLICATION_TYPES_BPM WHERE APP_TYPE_ID = ? AND STORAGE_TYPE = ?";

		public static final String SELECT_APPLICATION_TYPES = "SELECT * FROM APP_APPLICATION_TYPES WHERE APP_TYPE_ID = ? AND STORAGE_TYPE = ?";

		public static final String SELECT_ASSIGNED_EMPLOYEES_TO_APPLICATION_TYPES_BPM = "SELECT * FROM APP_ASSIG_EMP_TO_APP_TYPES_BPM WHERE APP_TYPE_ID = ? AND STORAGE_TYPE = ?";

		public static final String SELECT_ASSIGNED_EMPLOYEES_TO_APPLICATION_TYPES = "SELECT * FROM APP_ASSIG_EMP_TO_APP_TYPES WHERE APP_TYPE_ID = ? AND STORAGE_TYPE = ?";

		public static final String SELECT_UNASSIGNED_APPLICATION_TYPES = "SELECT APP_TYPE_ID, APP_TYPE_NAME_EN, APP_TYPE_NAME_AR, AUTO_REPLY, SUBJECT, DESCRIPTION, REPLY_MESSAGE, FROM_MSG_CENTER FROM APP_APPLICATION_TYPES WHERE APP_TYPE_ID NOT IN (SELECT APP_TYPE_ID FROM APP_ASSIG_EMP_TO_APP_TYPES WHERE EMPLOYEE_ID=?)";

		public static final String DELETE_ASSIGN_ALL_APPLICATION_TYPES = "DELETE APP_ASSIG_EMP_TO_APP_TYPES WHERE EMPLOYEE_ID=?";

		public static final String DELETE_ASSIGN_ONE_APPLICATION_TYPE = "DELETE APP_ASSIG_EMP_TO_APP_TYPES WHERE APP_TYPE_ID=? AND EMPLOYEE_ID=? AND RECORD_STATUS =?";

		public static final String SQL_SELECT_EXISTS = "SELECT APP_TYPE_ID FROM TABLE_NAME  WHERE (APP_TYPE_NAME_EN = ? or APP_TYPE_NAME_AR = ?) AND STORAGE_TYPE = ? AND RECORD_STATUS <> ?";

		public static final String SQL_UPDATE_STATUS_EMPLOYEES_TO_APP_TYPES = " UPDATE TABLE_NAME SET RECORD_STATUS = ?,ACTIONED_BY_EMP_ID = ?,ACTION_DATE = SYSDATE  WHERE APP_TYPE_ID = ? AND RECORD_STATUS = ? ";

		public static final String SQL_SELECT_ASSIGNED_EMPLOYEES_TO_APP_TYPES = "SELECT * FROM TABLE_NAME WHERE APP_TYPE_ID = ? AND STORAGE_TYPE = ?";

	}

	public static class Cases {
		private Cases() {
			throw new IllegalStateException("Cases class");
		}

		public static final int STATUS_NEW = 1;
		public static final int STATUS_OPEN = 2;
		public static final int STATUS_CLOSED = 3;
		public static final int REASSIGN = 1;
		public static final int REQUEST_ASSISTANCE = 2;
		public static final int ALTERNATIVE_STATUS_WAITING_FOR_AGENT = 1;
		public static final int ALTERNATIVE_STATUS_WAITING_FOR_CUSTOMER = 2;
		public static final int ALTERNATIVE_STATUS_READ_BY_AGENT = 3;
		public static final int ALTERNATIVE_STATUS_READ_BY_CUSTOMER = 4;
		public static final int RECORD_STATUS_PENDING = 0;
		public static final int RECORD_STATUS_APPROVED = 1;
		public static final int NOT_DELETED = 0;

		public static final String REPLACE_PARAM = "REPLACE_PARAM";
		public static final String REPLACE_PARAM2 = "REPLACE_PARAM2";

		public static final String INSERT_MASTER = "INSERT INTO CASE_MESSAGES (MESSAGE_ID,BANK_ID, USER_ID_FROM,USER_ID_TO, SUBJECT_TEXT, MSG_STATUS_ID, MSG_FOLDER_ID,IS_EMPLOYEE,MSG_TYPE_ID, MSG_PRIORITY_ID,CAN_REPLY,CASE_COMMENT,IS_ASSIGNED,ALTERNATIVE_STATUS,RECORD_STATUS,CREATED_DATE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,SYSDATE)";
		public static final String INSERT_DETAIL = "INSERT INTO CASE_MESSAGES_DETAILS (MSG_DETAIL_ID,MSG_ID, BODY_TEXT, STATUS_ID, FROM_USER_ID, TO_USER_ID, IS_EMPLOYEE,CREATED_DATE) VALUES (?,?,?,?,?,?,?,SYSDATE)";

		public static final String CASE_MESSAGES_DETAIL = new StringBuilder(
				"SELECT MSG.MESSAGE_ID,DET.CREATED_DATE,MSG.CASE_COMMENT,MSG.SUBJECT_TEXT,MSG.USER_ID_FROM,MSG.USER_ID_TO, ")
						.append("MSG.CAN_REPLY, MSG.BANK_ID, MSG.MODIFIED_DATE, MSG.ALTERNATIVE_STATUS, MSG.RECORD_STATUS, ")
						.append("MSG.MSG_TYPE_ID,MSG.MSG_FOLDER_ID,MSG.MSG_PRIORITY_ID,MSG.MSG_STATUS_ID,MSG.IS_DELETED,MSG.IS_ASSIGNED,MSG.DELETED_BY, ")
						.append("DET.BODY_TEXT,DET.FROM_USER_ID,DET.TO_USER_ID,DET.IS_EMPLOYEE,DET.MSG_DETAIL_ID,MSG.CASE_COMMENT, ")
						.append("EMP.EMP_ID,EMP.USER_NAME AS EMP_USER, ")
						.append("CUST.CUST_ID,CUST.USER_NAME AS CUSTOMER_USER, ")
						.append("ST.MSG_STATUS_NAME_EN,ST.MSG_STATUS_NAME_AR,TP.CASE_TYPE_NAME_AR,TP.CASE_TYPE_NAME_EN, ")
						.append("ALS.ICON_PATH_AR,ALS.ICON_PATH_EN,ALS.USER_STATUS_AR,ALS.USER_STATUS_EN ")
						.append("FROM CASE_MESSAGES_DETAILS DET ")
						.append("INNER JOIN CASE_MESSAGES MSG ON DET.MSG_ID = MSG.MESSAGE_ID ")
						.append("INNER JOIN CASE_CASE_TYPES TP ON MSG.MSG_TYPE_ID = TP.CASE_TYPE_ID ")
						.append("INNER JOIN CASE_ALTERNATIVE_STATUS ALS ON DET.STATUS_ID = ALS.MESSAGE_STATUS_ID ")
						.append("INNER JOIN CUSTS_PROFILES CUST ON DECODE(DET.IS_EMPLOYEE,0,MSG.USER_ID_FROM,1,MSG.USER_ID_TO) = CUST.CUST_ID ")
						.append("LEFT JOIN EMP_EMPLOYEES EMP ON DECODE(DET.IS_EMPLOYEE,0,MSG.USER_ID_TO,1,MSG.USER_ID_FROM) = EMP.EMP_ID ")
						.append("INNER JOIN CASE_MSG_STATUS_TYPES ST ON MSG.MSG_STATUS_ID = ST.MSG_STATUS_ID where CUST.CUST_ID = ? AND DET.MSG_ID=? ORDER BY DET.MSG_DETAIL_ID ASC")
						.toString();

		public static final String CASE_ALL_CUST_MESSAGES_DETAILS = new StringBuilder(
				"SELECT MSG.MESSAGE_ID,DET.CREATED_DATE,MSG.CASE_COMMENT,MSG.SUBJECT_TEXT,MSG.USER_ID_FROM,MSG.USER_ID_TO, ")
						.append("MSG.CAN_REPLY, MSG.BANK_ID, MSG.MODIFIED_DATE, MSG.ALTERNATIVE_STATUS, MSG.RECORD_STATUS, ")
						.append("MSG.MSG_TYPE_ID,MSG.MSG_FOLDER_ID,MSG.MSG_PRIORITY_ID,MSG.MSG_STATUS_ID,MSG.IS_DELETED,MSG.IS_ASSIGNED,MSG.DELETED_BY, ")
						.append("DET.BODY_TEXT,DET.FROM_USER_ID,DET.TO_USER_ID,DET.IS_EMPLOYEE,DET.MSG_DETAIL_ID,MSG.CASE_COMMENT, ")
						.append("EMP.EMP_ID,EMP.USER_NAME AS EMP_USER, ")
						.append("CUST.CUST_ID,CUST.USER_NAME AS CUSTOMER_USER, ")
						.append("ST.MSG_STATUS_NAME_EN,ST.MSG_STATUS_NAME_AR,TP.CASE_TYPE_NAME_AR,TP.CASE_TYPE_NAME_EN, ")
						.append("ALS.ICON_PATH_AR,ALS.ICON_PATH_EN,ALS.USER_STATUS_AR,ALS.USER_STATUS_EN ")
						.append("FROM CASE_MESSAGES_DETAILS DET ")
						.append("INNER JOIN CASE_MESSAGES MSG ON DET.MSG_ID = MSG.MESSAGE_ID ")
						.append("INNER JOIN CASE_CASE_TYPES TP ON MSG.MSG_TYPE_ID = TP.CASE_TYPE_ID ")
						.append("INNER JOIN CASE_ALTERNATIVE_STATUS ALS ON DET.STATUS_ID = ALS.MESSAGE_STATUS_ID ")
						.append("INNER JOIN CUSTS_PROFILES CUST ON DECODE(DET.IS_EMPLOYEE,0,MSG.USER_ID_FROM,1,MSG.USER_ID_TO) = CUST.CUST_ID ")
						.append("LEFT JOIN EMP_EMPLOYEES EMP ON DECODE(DET.IS_EMPLOYEE,0,MSG.USER_ID_TO,1,MSG.USER_ID_FROM) = EMP.EMP_ID ")
						.append("INNER JOIN CASE_MSG_STATUS_TYPES ST ON MSG.MSG_STATUS_ID = ST.MSG_STATUS_ID where DET.MSG_ID in #inCondition# ORDER BY MSG.MESSAGE_ID DESC, DET.MSG_DETAIL_ID ASC")
						.toString();

		public static final String SELECT_USER_CASES_IDS = " SELECT 	MSG.MESSAGE_ID  "
				+ " FROM 	 	CASE_MESSAGES MSG  INNER JOIN CASE_ALTERNATIVE_STATUS ST ON  "
				+ " 			MSG.ALTERNATIVE_STATUS = ST.MESSAGE_STATUS_ID  AND MSG.RECORD_STATUS=1  "
				+ " WHERE 	( " + " 					( /*USER_ID_TO = " + 547
				+ " AND*/ USER_ID_FROM =?  AND  IS_EMPLOYEE = 0)  "
				+ "			 	 OR ( USER_ID_TO =? AND IS_EMPLOYEE = 1) " + " 			 )"
				+ " 			AND IS_DELETED=0 " + " 			AND MSG_TYPE_ID <> ? "
				+ " order by 	MSG.CREATED_DATE DESC";

		public static final String CASE_DETAILS = "SELECT MESSAGE_ID,SUBJECT_TEXT,TO_CHAR(CREATED_DATE,'DD/MM/YYYY HH:MI:SS') AS CREATED_DATE,USER_ID_TO,IS_EMPLOYEE,MSG_TYPE_ID,IS_DELETED,MSG_STATUS_ID ,IS_ASSIGNED,USER_ID_FROM,MSG_FOLDER_ID,MSG_PRIORITY_ID,CASE_COMMENT,DELETED_BY FROM CASE_MESSAGES WHERE MESSAGE_ID=?";

		public static final String CASE_STATUS = "SELECT MSG_STATUS_ID,MSG_STATUS_NAME_EN,MSG_STATUS_NAME_AR FROM CASE_MSG_STATUS_TYPES";

		public static final String SELECT_CUSTOMER_CASES = " SELECT MSG.MESSAGE_ID,MSG.ALTERNATIVE_STATUS,MSG.SUBJECT_TEXT, TO_CHAR(MSG.CREATED_DATE,'DD/MM/YYYY HH:MI:SS') AS CREATED_DATE,ST.USER_STATUS_EN,ST.USER_STATUS_AR,ST.ICON_PATH_AR,ST.ICON_PATH_EN, TP.CASE_TYPE_NAME_AR,TP.CASE_TYPE_NAME_EN "
				+ " FROM CASE_MESSAGES MSG "
				+ " INNER JOIN CASE_ALTERNATIVE_STATUS ST ON  MSG.ALTERNATIVE_STATUS = ST.MESSAGE_STATUS_ID AND MSG.RECORD_STATUS="
				+ RECORD_STATUS_APPROVED + " " + " INNER JOIN CASE_CASE_TYPES TP ON MSG.MSG_TYPE_ID = TP.CASE_TYPE_ID "
				+ " WHERE ( " + "                 ( /*USER_ID_TO = " + 547 + " AND*/ USER_ID_FROM = " + REPLACE_PARAM
				+ " AND  IS_EMPLOYEE = 0) " + "              OR ( USER_ID_TO =" + REPLACE_PARAM
				+ " AND IS_EMPLOYEE = 1) " + "        ) "
				+ "       AND IS_DELETED=0 AND MSG_TYPE_ID <> param2 order by MSG.CREATED_DATE DESC ";

		public static final String SELECT_ADMIN_CASES = new StringBuilder(
				"SELECT DISTINCT CUST.CIF , MSG.MSG_STATUS_ID, MSG.MESSAGE_ID,MSG.SUBJECT_TEXT,CUST.NAME_EN,CUST.USER_NAME,CUST.CUST_ID ,CUST.FIRST_NAME,")
						.append(" CUST.LAST_NAME,ST.MSG_STATUS_NAME_EN AS STATUS_EN,ST.MSG_STATUS_NAME_AR AS STATUS_AR,MSG.CREATED_DATE,")
						.append(" TP.CASE_TYPE_NAME_EN AS CASE_TYPE, REPLACE(BODY_TEXT, '<br/>', '\n') AS BODY_TEXT ")
						.append(" FROM CASE_MESSAGES MSG ")
						.append(" INNER JOIN CASE_CASE_TYPES TP ON MSG.MSG_TYPE_ID = TP.CASE_TYPE_ID ")
						.append(" INNER JOIN CASE_EMP_TO_CASES_TYPES CASE_EMP ON TP.CASE_TYPE_ID = CASE_EMP.CASE_TYPE_ID ")
						.append(" INNER JOIN CUSTS_PROFILES CUST ON DECODE(MSG.IS_EMPLOYEE,0,MSG.USER_ID_FROM,1,MSG.USER_ID_TO) = CUST.CUST_ID ")
						.append(" INNER JOIN CASE_MSG_STATUS_TYPES ST ON MSG.MSG_STATUS_ID = ST.MSG_STATUS_ID ")
						.append(" INNER JOIN CASE_MESSAGES_DETAILS MSGD ON MSG.MESSAGE_ID = MSGD.MSG_ID AND MSGD.FROM_USER_ID <> 1")
						.append(" where MSG.IS_DELETED=0 ").append(" AND (CASE_EMP.EMPLOYEE_ID=").append(REPLACE_PARAM2)
						.append(" OR CUST.PERSONAL_BANKER_EMP_ID=").append(REPLACE_PARAM2)
						.append(" OR DECODE(MSG.IS_ASSIGNED ,1,MSG.USER_ID_TO)=").append(REPLACE_PARAM2).append(")")
						.append(" AND MSG.RECORD_STATUS=").append(RECORD_STATUS_APPROVED)
						.append(" ORDER BY CREATED_DATE DESC").toString();

		public static final String SELECT_ASSIGNED_CASES = new StringBuilder(
				"SELECT EMP.USER_NAME,MSG.SUBJECT_TEXT,ST.MSG_STATUS_NAME_EN,REQ.REQUEST_ID,REQ.REQUEST_TYPE_ID,REQ.CASE_ID,REQ.MESSAGE,")
						.append(" REQ.MESSAGE_REPLY,REQ.FROM_EMP_ID,REQ.TO_EMP_ID,TO_CHAR(REQ.REQUEST_DATE,'DD/MM/YYYY HH:MI:SS') AS REQUEST_DATE")
						.append(" FROM CASE_REQUEST_HISTORY REQ ")
						.append(" INNER JOIN CASE_MESSAGES MSG ON MSG.MESSAGE_ID = REQ.CASE_ID ")
						.append(" INNER JOIN CASE_MSG_STATUS_TYPES ST ON MSG.MSG_STATUS_ID = ST.MSG_STATUS_ID ")
						.append(" INNER JOIN EMP_EMPLOYEES EMP ON EMP.EMP_ID = REQ.FROM_EMP_ID ")
						.append(" WHERE MSG.MSG_STATUS_ID <>").append(STATUS_CLOSED).append(" AND REQ.REQUEST_TYPE_ID=")
						.append(REASSIGN).append(" AND REQ.TO_EMP_ID=").append(REPLACE_PARAM)
						.append(" AND MSG.RECORD_STATUS=").append(RECORD_STATUS_APPROVED)
						.append(" ORDER BY MSG.MESSAGE_ID").toString();

		public static final String INSERT_REQUEST = "INSERT INTO CASE_REQUEST_HISTORY (REQUEST_ID,REQUEST_TYPE_ID,CASE_ID,MESSAGE,FROM_EMP_ID,TO_EMP_ID,REQUEST_DATE) VALUES(?,?,?,?,?,?,SYSDATE)";
		public static final String UPDATE_REQUEST = "UPDATE CASE_REQUEST_HISTORY SET REPLY_DATE=SYSDATE, MESSAGE_REPLY=? WHERE REQUEST_ID=?";
		public static final String REASSIGN_CASE = "UPDATE CASE_MESSAGES SET MODIFIED_DATE=SYSDATE, IS_ASSIGNED=1, USER_ID_TO=? WHERE MESSAGE_ID=?";
		public static final String CHANGE_CASE_STATUS = "UPDATE CASE_MESSAGES SET MODIFIED_DATE=SYSDATE, MSG_STATUS_ID=? WHERE MESSAGE_ID =?";

		public static final String SELECT_REQUEST_HISTORY = new StringBuilder(
				"SELECT CASE_ID,EMP.USER_NAME, H.REQUEST_ID,MESSAGE,MESSAGE_REPLY FROM CASE_REQUEST_HISTORY H INNER JOIN EMP_EMPLOYEES EMP ON (H.TO_EMP_ID = EMP.EMP_ID) ")
						.append(" INNER JOIN CASE_REQUEST_TYPES RT ON H.REQUEST_TYPE_ID = RT.REQUEST_TYPE_ID ")
						.append(" WHERE RT.REQUEST_TYPE_ID=1 ").append(" AND H.CASE_ID=").append(REPLACE_PARAM)
						.append(" ORDER BY H.REQUST_ID").toString();

		public static final String SELECT_NOT_ASSIGNED_CASES = new StringBuilder(
				" SELECT MESSAGE_ID FROM CASE_MESSAGES WHERE IS_ASSIGNED=0 AND MSG_STATUS_ID<>").append(STATUS_CLOSED)
						.toString();

		public static final String SELECT_NEW_CASES = new StringBuilder(
				"SELECT DISTINCT MSG.MESSAGE_ID,MSG.SUBJECT_TEXT,TP.CASE_TYPE_NAME_EN ,CUST.USER_NAME,")
						.append(" CUST.CUST_ID ,CUST.FIRST_NAME,CUST.LAST_NAME ,ST.MSG_STATUS_NAME_EN AS STATUS_EN, ")
						.append(" ST.MSG_STATUS_NAME_AR AS STATUS_AR,TO_CHAR(MSG.CREATED_DATE,'DD/MM/YYYY HH:MI:SS') AS CREATED_DATE ,")
						.append(" TP.CASE_TYPE_NAME_EN AS CASE_TYPE FROM CASE_MESSAGES MSG ")
						.append(" INNER JOIN CASE_CASE_TYPES TP ON MSG.MSG_TYPE_ID = TP.CASE_TYPE_ID ")
						.append(" INNER JOIN CASE_EMP_TO_CASES_TYPES CASE_EMP ON TP.CASE_TYPE_ID = CASE_EMP.CASE_TYPE_ID ")
						.append(" INNER JOIN CUSTS_PROFILES CUST ON DECODE(MSG.IS_EMPLOYEE,0,MSG.USER_ID_FROM,1,MSG.USER_ID_TO) = CUST.CUST_ID ")
						.append(" INNER JOIN CASE_MSG_STATUS_TYPES ST ON MSG.MSG_STATUS_ID = ST.MSG_STATUS_ID ")
						.append(" WHERE MSG.IS_ASSIGNED=0 AND MSG.IS_EMPLOYEE=0 AND MSG.MSG_STATUS_ID=")
						.append(STATUS_NEW).append(" AND MSG.RECORD_STATUS=").append(RECORD_STATUS_APPROVED)
						.append(" AND IS_DELETED=0")
						// .append(" AND MSG.MESSAGE_ID IN (").append(REPLACE_PARAM).append(")")
						.append(" AND MSG.MESSAGE_ID IN (" + SELECT_NOT_ASSIGNED_CASES + ")")
						.append(" AND (CASE_EMP.EMPLOYEE_ID=").append(REPLACE_PARAM2)
						.append(" OR CUST.PERSONAL_BANKER_EMP_ID=").append(REPLACE_PARAM2).append(")")
						.append(" ORDER BY MSG.MESSAGE_ID").toString();

		public static final String SELECT_PENDING_CASES = new StringBuilder(
				"SELECT DISTINCT MSG.MESSAGE_ID,MSG.SUBJECT_TEXT,TP.CASE_TYPE_NAME_EN ,CUST.USER_NAME,")
						.append(" CUST.CUST_ID ,CUST.FIRST_NAME,CUST.LAST_NAME ,ST.MSG_STATUS_NAME_EN AS STATUS_EN, ")
						.append(" ST.MSG_STATUS_NAME_AR AS STATUS_AR,TO_CHAR(MSG.CREATED_DATE,'DD/MM/YYYY HH:MI:SS') AS CREATED_DATE, ")
						.append(" TP.CASE_TYPE_NAME_EN AS CASE_TYPE FROM CASE_MESSAGES MSG ")
						.append(" INNER JOIN CASE_CASE_TYPES TP ON MSG.MSG_TYPE_ID = TP.CASE_TYPE_ID ")
						.append(" INNER JOIN EMP_EMPLOYEES EMP ON EMP.EMP_ID = MSG.USER_ID_FROM ")
						.append(" INNER JOIN CUSTS_PROFILES CUST ON MSG.USER_ID_TO = CUST.CUST_ID ")
						.append(" INNER JOIN CASE_MSG_STATUS_TYPES ST ON MSG.MSG_STATUS_ID = ST.MSG_STATUS_ID ")
						.append(" WHERE MSG.IS_EMPLOYEE=1 ").append(" AND MSG.RECORD_STATUS=")
						.append(RECORD_STATUS_PENDING).append(" AND ((MSG.USER_ID_FROM <> ").append(REPLACE_PARAM)
						.append(") OR (EMP.ALLOW_OWN_APPROVAL = 1)) ").append(" ORDER BY MSG.MESSAGE_ID ").toString();

		public static final String SELECT_EMP_CUSTOMERS = new StringBuilder(
				"SELECT MSG.MESSAGE_ID,CUST.NAME_EN,MSG.SUBJECT_TEXT,CUST.USER_NAME,CUST.CUST_ID,TO_CHAR(MSG.CREATED_DATE,'DD/MM/YYYY HH:MI:SS') AS CREATED_DATE, ")
						.append(" MSG.MSG_STATUS_ID FROM CASE_MESSAGES MSG INNER JOIN CUSTS_PROFILES CUST ON (MSG.USER_ID_FROM = CUST.CUST_ID OR MSG.USER_ID_TO = CUST.CUST_ID) ")
						.append(" WHERE MSG.RECORD_STATUS=").append(RECORD_STATUS_APPROVED)
						.append(" AND CUST.PERSONAL_BANKER_EMP_ID = ").toString();

		public static final String SELECT_HELP_REQUEST = new StringBuilder(
				"SELECT EMP.USER_NAME,MSG.SUBJECT_TEXT,MSG.MSG_STATUS_ID,REQ.REQUEST_ID,REQ.REQUEST_TYPE_ID,REQ.CASE_ID,REQ.MESSAGE,REQ.MESSAGE_REPLY,REQ.FROM_EMP_ID, ")
						.append(" REQ.TO_EMP_ID,TO_CHAR(REQ.REQUEST_DATE,'DD/MM/YYYY HH:MI:SS') AS REQUEST_DATE,TO_CHAR(REQ.REPLY_DATE,'DD/MM/YYYY HH:MI:SS') AS REPLY_DATE FROM CASE_REQUEST_HISTORY REQ ")
						.append(" INNER JOIN CASE_MESSAGES MSG ON  REQ.CASE_ID = MSG.MESSAGE_ID ")
						.append(" INNER JOIN EMP_EMPLOYEES EMP ON EMP.EMP_ID = REQ.FROM_EMP_ID ")
						.append(" WHERE REQ.REQUEST_TYPE_ID=").append(REQUEST_ASSISTANCE).append(" AND REQ.TO_EMP_ID=")
						.toString();

		public static final String SELECT_ASSISTANT_PROVIDED = new StringBuilder(
				"SELECT EMP.USER_NAME,MSG.SUBJECT_TEXT,MSG_STATUS_ID,REQ.REQUEST_TYPE_ID,RT.REQUEST_TYPE_NAME_EN,REQ.REQUEST_ID,REQ.CASE_ID,REQ.MESSAGE, ")
						.append(" REQ.MESSAGE_REPLY,REQ.FROM_EMP_ID,REQ.TO_EMP_ID,TO_CHAR(REQ.REQUEST_DATE,'DD/MM/YYYY HH:MI:SS') AS REQUEST_DATE FROM CASE_REQUEST_HISTORY REQ ")
						.append(" INNER JOIN CASE_MESSAGES MSG ON MSG.MESSAGE_ID = REQ.CASE_ID ")
						.append(" INNER JOIN EMP_EMPLOYEES EMP ON EMP.EMP_ID = REQ.TO_EMP_ID ")
						.append(" INNER JOIN CASE_REQUEST_TYPES RT ON REQ.REQUEST_TYPE_ID = RT.REQUEST_TYPE_ID ")
						.append(" WHERE (REQ.REQUEST_TYPE_ID=").append(REQUEST_ASSISTANCE)
						.append(" AND MSG.MSG_STATUS_ID=").append(STATUS_CLOSED).append(" AND REQ.TO_EMP_ID=")
						.append(REPLACE_PARAM).append(" ) ").append(" OR (REQ.REQUEST_TYPE_ID=")
						.append(REQUEST_ASSISTANCE).append(" AND REQ.TO_EMP_ID=").append(REPLACE_PARAM).append(")")
						.append(" ORDER BY REQUEST_ID").toString();

		public static final String SELECT_REQUEST_HISTORY_DETAILS = new StringBuilder(
				"SELECT CASE_ID,REQUEST_ID,MESSAGE,MESSAGE_REPLY,USER_NAME,TO_CHAR(REQUEST_DATE,'DD/MM/YYYY HH:MI:SS') AS REQUEST_DATE,TO_CHAR(REPLY_DATE,'DD/MM/YYYY HH:MI:SS') AS REPLY_DATE FROM CASE_REQUEST_HISTORY INNER JOIN EMP_EMPLOYEES ON TO_EMP_ID = EMP_ID ")
						.append(" WHERE REQUEST_TYPE_ID=").append(REQUEST_ASSISTANCE).append(" AND CASE_ID=")
						.toString();

		public static final String SELECT_REQUEST_HISTORY_DETAILS_BY_REQUEST_ID = new StringBuilder(
				"SELECT CASE_ID,REQUEST_ID,MESSAGE,MESSAGE_REPLY,USER_NAME,TO_EMP_ID,FROM_EMP_ID,TO_CHAR(REQUEST_DATE,'DD/MM/YYYY HH:MI:SS') AS REQUEST_DATE,TO_CHAR(REPLY_DATE,'DD/MM/YYYY HH:MI:SS') AS REPLY_DATE FROM CASE_REQUEST_HISTORY INNER JOIN EMP_EMPLOYEES ON TO_EMP_ID = EMP_ID WHERE REQUEST_TYPE_ID=")
						.append(REQUEST_ASSISTANCE).append(" AND REQUEST_ID=").toString();
		public static final String SELECT_REASSIGN_HISTORY_DETAILS = "SELECT CASE_ID,REQUEST_ID,MESSAGE,MESSAGE_REPLY,USER_NAME,TO_CHAR(REQUEST_DATE,'DD/MM/YYYY HH:MI:SS') AS REQUEST_DATE,TO_CHAR(REPLY_DATE,'DD/MM/YYYY HH:MI:SS') AS REPLY_DATE FROM CASE_REQUEST_HISTORY INNER JOIN EMP_EMPLOYEES ON TO_EMP_ID = EMP_ID WHERE REQUEST_TYPE_ID="
				+ REASSIGN + " AND CASE_ID=";

		public static final String SELECT_AUTO_RESPONSE_MESSAGE = "SELECT AUTO_RESPONSE_EN,AUTO_RESPONSE_AR,SUBJECT,DESCRIPTION FROM CASE_CASE_TYPES WHERE CASE_TYPE_ID=?";
		public static final String UPDATE_ALTERNATIVE_STATUS = "UPDATE CASE_MESSAGES SET ALTERNATIVE_STATUS=? WHERE MESSAGE_ID=?";

		public static final String UPDATE_APPROVE_CASE = new StringBuilder("UPDATE CASE_MESSAGES SET RECORD_STATUS=")
				.append(RECORD_STATUS_APPROVED).append(" WHERE MESSAGE_ID=?").toString();

		public static final String SELECT_NEW_CASES_COUNT = " SELECT count(1) as newCases from CASE_MESSAGES "
				+ " where ( " + "                    (/*USER_ID_TO = " + 547
				+ " and*/  USER_ID_FROM = ? and  IS_EMPLOYEE = 0) "
				+ "                 Or (USER_ID_TO = ? and  IS_EMPLOYEE = 1) )" + "			and ALTERNATIVE_STATUS="
				+ ALTERNATIVE_STATUS_WAITING_FOR_CUSTOMER + " and IS_DELETED=" + NOT_DELETED + " "
				+ "			and RECORD_STATUS=" + RECORD_STATUS_APPROVED + "";

	}

	/**
	 * @author afayad
	 * @version 1.0
	 * @since 04-OCT-2011
	 */
	public static class CASE_TYPE {
		private CASE_TYPE() {
			throw new IllegalStateException("CASE_TYPE class");
		}

		public static final String TABLE_CASE_CASE_TYPES = "CASE_CASE_TYPES";
		public static final String TABLE_CASE_ASSIG_EMP_TO_CASES_TYPES = "CASE_EMP_TO_CASES_TYPES";
		public static final String TABLE_CASE_CASE_TYPES_BPM = "CASE_CASE_TYPES_BPM";
		public static final String TABLE_CASE_ASSIG_EMP_TO_CASES_TYPES_BPM = "CASE_EMP_TO_CASES_TYPES_BPM";
		public static final String SEQ_CASE_TYPE_ID_SEQ = "CASE_TYPE_ID_SEQ";
		public static final String SQL_INSERT_CASE_TYPE = " INSERT INTO TABLE_NAME (CASE_TYPE_ID,DESCRIPTION, CASE_TYPE_NAME_EN,CASE_TYPE_NAME_AR, AUTO_RESPONSE_EN,AUTO_RESPONSE_AR,SUBJECT,OPERATION_TYPE,RECORD_STATUS,CREATED_DATE,ACTIONED_BY_EMP_ID,CREATED_BY_EMP_ID,ACTION_DATE,STORAGE_TYPE) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		public static final String SQL_DELETE_CASE_TYPE = "DELETE TABLE_NAME WHERE CASE_TYPE_ID=? AND STORAGE_TYPE=? ";
		public static final String SQL_INSERT_ASSIGN_CASE_TYPE = "INSERT INTO TABLE_NAME (CASE_TYPE_ID,EMPLOYEE_ID,OPERATION_TYPE,RECORD_STATUS,CREATED_DATE,ACTIONED_BY_EMP_ID,CREATED_BY_EMP_ID,ACTION_DATE,STORAGE_TYPE) values (?,?,?,?,?,?,?,?,?)";
		public static final String SQL_DELETE_ASSIGN_CASE_TYPE = "DELETE TABLE_NAME WHERE CASE_TYPE_ID=? AND STORAGE_TYPE = ?";
		public static final String SQL_DELETE_ASSIGN_ONE_CASE_TYPE = "delete TABLE_NAME where CASE_TYPE_ID=? and EMPLOYEE_ID=? AND RECORD_STATUS = ?";
		public static final String SQL_DELETE_ASSIGN_ALL_CASE_TYPES = "delete TABLE_NAME where EMPLOYEE_ID=? AND STORAGE_TYPE = ?";
		public static final String SQL_SELECT_UNASSIGNED_CASE_TYPES = "select * from TABLE_NAME where case_type_id not in (select case_type_id from CASE_ASSIG_EMP_TO_CASES_TYPES where employee_id=?)";
		public static final String SQL_SELECT_CASE_TYPES = "SELECT * FROM TABLE_NAME WHERE CASE_TYPE_ID = ? AND STORAGE_TYPE = ?";
		public static final String SQL_SELECT_ASSIGNED_EMPLOYEES_TO_CASE_TYPES = "SELECT * FROM TABLE_NAME WHERE CASE_TYPE_ID = ? AND STORAGE_TYPE = ?";
		public static final String SQL_UPDATE_STATUS_CASE_TYPE = " UPDATE TABLE_NAME SET RECORD_STATUS = ?,ACTIONED_BY_EMP_ID = ?,ACTION_DATE = SYSDATE  WHERE CASE_TYPE_ID = ? AND RECORD_STATUS = ? ";
		public static final String SQL_UPDATE_STATUS_EMPLOYEES_TO_CASE_TYPES = " UPDATE TABLE_NAME SET RECORD_STATUS = ?,ACTIONED_BY_EMP_ID = ?,ACTION_DATE = SYSDATE  WHERE CASE_TYPE_ID = ? AND RECORD_STATUS = ? ";

		public static final String SQL_UPDATE_CASE_TYPES = new StringBuilder(
				" UPDATE   TABLE_NAME 	    SET	    SUBJECT = ? ,RECORD_STATUS  = ? ,").append(
						" CASE_TYPE_NAME_EN  = ? , DESCRIPTION   = ? , CASE_TYPE_NAME_AR  = ? ,OPERATION_TYPE  = ? ,")
						.append(" AUTO_RESPONSE_EN = ?,AUTO_RESPONSE_AR  = ?, CREATED_DATE= ?, CREATED_BY_EMP_ID  = ?, ROW_STATUS = ?")
						.append(" WHERE  CASE_TYPE_ID = ? AND STORAGE_TYPE = ?").toString();

		public static final String SQL_SELECT_EXISTS = "SELECT CASE_TYPE_ID FROM TABLE_NAME  WHERE (CASE_TYPE_NAME_EN = ? or CASE_TYPE_NAME_AR = ?) AND STORAGE_TYPE = ? AND RECORD_STATUS <> ?";

		public static final String SQL_DELETE_EMP_ASSIGNMENT = "DELETE TABLE_NAME WHERE EMPLOYEE_ID = ? AND STORAGE_TYPE = ?";
		public static final String SQL_SELECT_EMP_ASSIGNMENT = "SELECT * FROM TABLE_NAME WHERE EMPLOYEE_ID = ? AND STORAGE_TYPE = ?";

	}

	/**
	 * @author afayad
	 * @version 1.0
	 * @since 04-OCT-2011
	 */
	public static class MARKET_SEGMENT {
		private MARKET_SEGMENT() {
			throw new IllegalStateException("MARKET_SEGMENT class");
		}

		public static final String TABLE_MARKET_SEGMENTS = "MARKET_SEGMENTS";
		public static final String TABLE_MARKET_SEGMENTS_BPM = "MARKET_SEGMENTS_BPM";
		public static final String SEQ_MARKET_SEGMENT_ID_SEQ = "MARKET_SEGMENT_ID_SEQ";

		public static final String SQL_INSERT_MARKET_SEGMENT = new StringBuilder(
				"INSERT INTO TABLE_NAME (MS_ID, BANK_ID, CUST_TYPE_ID, ").append(
						" MS_NAME_EN,MS_DESCRIPTION,MS_NAME_AR,OPERATION_TYPE,RECORD_STATUS,CREATED_BY_EMP_ID,ACTIONED_BY_EMP_ID,ACTION_DATE,STORAGE_TYPE,CREATED_DATE) ")
						.append(" values (?,?,?,?,?,?,?,?,?,?,?,?,?)").toString();

		public static final String SQL_UPDATE_MARKET_SEGMENTS = new StringBuilder(
				"UPDATE  TABLE_NAME   SET  CUST_TYPE_ID  = ? , ")
						.append(" MS_DESCRIPTION     = ? , MS_NAME_AR = ? , OPERATION_TYPE     = ? , ")
						.append(" RECORD_STATUS      = ? ,  STORAGE_TYPE  = ? ,  MS_NAME_EN  = ? , BANK_ID = ?, CREATED_DATE = ?,CREATED_BY_EMP_ID  = ? ")
						.append(" WHERE  MS_ID = ? AND STORAGE_TYPE = ?").toString();

		public static final String SQL_SELECT_MARKET_SEGMENTS = "SELECT * FROM TABLE_NAME WHERE MS_ID = ? AND STORAGE_TYPE = ?";
		public static final String SQL_DELETE_MARKET_SEGMENTS = "DELETE TABLE_NAME WHERE MS_ID = ? AND STORAGE_TYPE=? ";
		public static final String SQL_UPDATE_STATUS_MARKET_SEGMENTS = " UPDATE TABLE_NAME SET RECORD_STATUS = ?,ACTIONED_BY_EMP_ID = ?,ACTION_DATE = SYSDATE  WHERE MS_ID = ? AND RECORD_STATUS = ? ";

		public static final String SQL_SELECT_EXISTS = "SELECT MS_ID FROM TABLE_NAME  WHERE (MS_NAME_EN = ? or MS_NAME_AR = ?) AND STORAGE_TYPE = ? AND RECORD_STATUS <> ?";

	}

	/**
	 * @author afayad
	 * @version 1.0
	 * @since 04-OCT-2011
	 */
	public static class SERVICE_PACKAGE {
		private SERVICE_PACKAGE() {
			throw new IllegalStateException("SERVICE_PACKAGE class");
		}

		public static final String SEQ_SERVICE_PACKAGE_ID_SEQ = "SERVICE_PACKAGE_ID_SEQ";
		public static final String TABLE_SERVICE_PACKAGES = "SERVICE_PACKAGES";
		public static final String TABLE_SERVICE_PACKAGES_BPM = "SERVICE_PACKAGES_BPM";
		public static final String SEQ_SERVICE_PACKAGES_ID_SEQ = "SERVICE_PACKAGE_ID_SEQ";

		public static final String SQL_INSERT_SERVICE_PACKAGES = new StringBuilder(
				"INSERT INTO TABLE_NAME (SP_ID, MS_ID, SP_NAME_EN , SP_DESCRIPTION,IS_DEFAULT, ")
						.append("OPERATION_TYPE,RECORD_STATUS,CREATED_BY_EMP_ID,ACTIONED_BY_EMP_ID,ACTION_DATE,")
						.append("STORAGE_TYPE,CREATED_DATE) values (?,?,?,?,?,?,?,?,?,?,?,?)").toString();

		public static final String SQL_UPDATE_SERVICE_PACKAGES = new StringBuilder(
				"UPDATE  TABLE_NAME   SET  MS_ID       = ? , ").append(
						" SP_NAME_EN     = ? ,  SP_DESCRIPTION = ? ,  IS_DEFAULT    = ? ,  OPERATION_TYPE  = ? , ")
						.append(" RECORD_STATUS      = ? ,  STORAGE_TYPE = ? , CREATED_DATE      = ?,CREATED_BY_EMP_ID  = ? ")
						.append(" WHERE SP_ID = ? AND STORAGE_TYPE = ?").toString();

		public static final String SQL_UPDATE_DEFAULT_SP = "UPDATE  TABLE_NAME   SET  IS_DEFAULT = 'false'   WHERE  SP_ID <> ? AND STORAGE_TYPE = ? AND RECORD_STATUS = 1";
		public static final String SQL_SELECT_SERVICE_PACKAGES = "SELECT * FROM TABLE_NAME WHERE SP_ID = ? AND STORAGE_TYPE = ?";
		public static final String SQL_DELETE_SERVICE_PACKAGES = "DELETE TABLE_NAME WHERE SP_ID = ? AND STORAGE_TYPE=? ";
		public static final String SQL_UPDATE_STATUS_SERVICE_PACKAGES = " UPDATE TABLE_NAME SET RECORD_STATUS = ?,ACTIONED_BY_EMP_ID = ?,ACTION_DATE = SYSDATE  WHERE SP_ID = ? AND RECORD_STATUS = ? ";
		public static final String SQL_SELECT_EXISTS = "SELECT SP_ID FROM TABLE_NAME  WHERE (SP_NAME_EN = ? or SP_NAME_AR = ?) AND STORAGE_TYPE = ? AND RECORD_STATUS <> ?";

	}

	public static class ACCOUNT_LIMIT_MATRICES {
		private ACCOUNT_LIMIT_MATRICES() {
			throw new IllegalStateException("ACCOUNT_LIMIT_MATRICES class");
		}

		public static final String SEQ_NAME = "LIMIT_MATRIX_ID_SEQ";
		public static final String MASTER_TABLE = "CUSTS_ACCOUNTS_LIMITS";
		public static final String BPM_TABLE = "CUSTS_ACCOUNTS_LIMITS_BPM";
		public static final String SQL_INSERT = " INSERT INTO TABLE_NAME  ( LIMIT_MATRIX_ID , ACCOUNT_ID ,CHANNEL_ID , "
				+ " CURRENCY_ID, LIMIT_PERIOD_ID  ,MAX_AMOUNT , TOTAL_TRANSACTIONS, OPERATION_TYPE, RECORD_STATUS, "
				+ " STORAGE_TYPE, ACTIONED_BY_EMP_ID, CREATED_BY_EMP_ID, ACTION_DATE, CREATION_DATE,CIF_NO) "
				+ " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		public static final String SQL_SELECT_EXISTS = "SELECT LIMIT_MATRIX_ID FROM TABLE_NAME  WHERE ACCOUNT_ID = ? and CHANNEL_ID = ? and CURRENCY_ID = ? and LIMIT_PERIOD_ID = ?  AND RECORD_STATUS <> ?";

		public static final String SQL_UPDATE = new StringBuilder(
				"UPDATE  TABLE_NAME  SET  ACCOUNT_ID= ? ,  CHANNEL_ID= ? ,  CURRENCY_ID= ? ,  LIMIT_PERIOD_ID= ? ,  MAX_AMOUNT= ? , TOTAL_TRANSACTIONS= ? , ")
						.append(" OPERATION_TYPE  = ? ,  RECORD_STATUS  = ? , STORAGE_TYPE  = ?  , CREATION_DATE      = ?, CREATED_BY_EMP_ID  = ?,  CIF_NO  = ?")
						.append(" WHERE  LIMIT_MATRIX_ID = ? AND STORAGE_TYPE = ?").toString();

		public static final String SQL_SELECT = "SELECT A.* FROM TABLE_NAME A  WHERE LIMIT_MATRIX_ID = ? AND A.STORAGE_TYPE = ?";
		public static final String SQL_DELETE = "DELETE TABLE_NAME WHERE LIMIT_MATRIX_ID = ? AND STORAGE_TYPE=? ";

		public static final String SQL_UPDATE_STATUS = " UPDATE TABLE_NAME SET RECORD_STATUS = ?,ACTIONED_BY_EMP_ID = ?,  ACTION_DATE = SYSDATE  WHERE LIMIT_MATRIX_ID = ? AND RECORD_STATUS = ? ";

	}

	public static class LIMIT_MATRICES_LEVEL_ONE {
		private LIMIT_MATRICES_LEVEL_ONE() {
			throw new IllegalStateException("LIMIT_MATRICES_LEVEL_ONE class");
		}

		public static final String SEQ_NAME = "LIMIT_MATRIX_ID_SEQ";
		public static final String MASTER_TABLE = "LIMIT_MATRICES_LEVEL1";
		public static final String BPM_TABLE = "LIMIT_MATRICES_LEVEL1_BPM";
		public static final String SQL_INSERT = "INSERT INTO TABLE_NAME (LIMIT_MATRIX_ID, SP_ID, CHANNEL_ID , TRANSFER_TYPE_ID,CURRENCY_ID,LIMIT_PERIOD_ID,MAX_AMOUNT,TOTAL_TRANSACTIONS "
				+ ",OPERATION_TYPE,RECORD_STATUS,CREATED_BY_EMP_ID,ACTIONED_BY_EMP_ID,ACTION_DATE,"
				+ "STORAGE_TYPE,CREATED_DATE) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		public static final String SQL_SELECT_EXISTS = "SELECT LIMIT_MATRIX_ID FROM TABLE_NAME  WHERE SP_ID = ? and CHANNEL_ID = ? and CURRENCY_ID = ? and TRANSFER_TYPE_ID = ? and  LIMIT_PERIOD_ID = ?  AND STORAGE_TYPE = ? AND RECORD_STATUS <> ?";

		public static final String SQL_UPDATE = new StringBuilder(
				"UPDATE  TABLE_NAME  SET  SP_ID  = ? ,  CHANNEL_ID = ? ,  TRANSFER_TYPE_ID = ? , ").append(
						" CURRENCY_ID  = ? , LIMIT_PERIOD_ID = ? , MAX_AMOUNT = ? ,  TOTAL_TRANSACTIONS    = ? , ")
						.append(" OPERATION_TYPE  = ? ,  RECORD_STATUS  = ? ,  STORAGE_TYPE  = ?  ,CREATED_DATE      = ?,")
						.append(" CREATED_BY_EMP_ID  = ?  WHERE  LIMIT_MATRIX_ID = ? AND STORAGE_TYPE = ?").toString();
		public static final String SQL_SELECT = "SELECT A.*, B.MS_ID FROM TABLE_NAME A INNER JOIN SERVICE_PACKAGES B ON A.SP_ID = B.SP_ID WHERE LIMIT_MATRIX_ID = ? AND A.STORAGE_TYPE = ?";
		public static final String SQL_DELETE = "DELETE TABLE_NAME WHERE LIMIT_MATRIX_ID = ? AND STORAGE_TYPE=? ";
		public static final String SQL_UPDATE_STATUS = " UPDATE TABLE_NAME SET RECORD_STATUS = ?,ACTIONED_BY_EMP_ID = ?,ACTION_DATE = SYSDATE  WHERE LIMIT_MATRIX_ID = ? AND RECORD_STATUS = ? ";

	}

	public static class LIMIT_MATRICES_LEVEL_TWO {
		private LIMIT_MATRICES_LEVEL_TWO() {
			throw new IllegalStateException("LIMIT_MATRICES_LEVEL_TWO class");
		}

		public static final String SEQ_NAME = "LIMIT_MATRIX_ID_SEQ";
		public static final String MASTER_TABLE = "LIMIT_MATRICES_LEVEL2";
		public static final String BPM_TABLE = "LIMIT_MATRICES_LEVEL2_BPM";
		public static final String SQL_INSERT = "INSERT INTO TABLE_NAME (LIMIT_MATRIX_ID, SP_ID, CHANNEL_ID ,CURRENCY_ID,LIMIT_PERIOD_ID,MAX_AMOUNT "
				+ ",OPERATION_TYPE,RECORD_STATUS,CREATED_BY_EMP_ID,ACTIONED_BY_EMP_ID,ACTION_DATE,"
				+ "STORAGE_TYPE,CREATED_DATE) values (?,?,?,?,?,?,?,?,?,?,?,?,?)";
		public static final String SQL_SELECT_EXISTS = "SELECT LIMIT_MATRIX_ID FROM TABLE_NAME  WHERE SP_ID = ? and CHANNEL_ID = ? and CURRENCY_ID = ?  and  LIMIT_PERIOD_ID = ?  AND STORAGE_TYPE = ? AND RECORD_STATUS <> ?";

		public static final String SQL_UPDATE = new StringBuilder(
				"UPDATE  TABLE_NAME   SET  SP_ID  = ? ,  CHANNEL_ID = ? , ")
						.append(" CURRENCY_ID  = ? , LIMIT_PERIOD_ID = ? , MAX_AMOUNT = ? , ")
						.append(" OPERATION_TYPE  = ? , RECORD_STATUS  = ? , STORAGE_TYPE  = ?  ,CREATED_DATE  = ?,CREATED_BY_EMP_ID  = ? ")
						.append(" WHERE  LIMIT_MATRIX_ID = ? AND STORAGE_TYPE = ?").toString();

		public static final String SQL_SELECT = "SELECT A.*, B.MS_ID FROM TABLE_NAME A INNER JOIN SERVICE_PACKAGES B ON A.SP_ID = B.SP_ID WHERE LIMIT_MATRIX_ID = ? AND A.STORAGE_TYPE = ?";
		public static final String SQL_DELETE = "DELETE TABLE_NAME WHERE LIMIT_MATRIX_ID = ? AND STORAGE_TYPE=? ";
		public static final String SQL_UPDATE_STATUS = " UPDATE TABLE_NAME SET RECORD_STATUS = ?,ACTIONED_BY_EMP_ID = ?,ACTION_DATE = SYSDATE  WHERE LIMIT_MATRIX_ID = ? AND RECORD_STATUS = ? ";

	}

	public static class LIMIT_MATRICES_LEVEL_THREE {
		private LIMIT_MATRICES_LEVEL_THREE() {
			throw new IllegalStateException("LIMIT_MATRICES_LEVEL_THREE class");
		}

		public static final String SEQ_NAME = "LIMIT_MATRIX_ID_SEQ";
		public static final String MASTER_TABLE = "LIMIT_MATRICES_LEVEL3";
		public static final String BPM_TABLE = "LIMIT_MATRICES_LEVEL3_BPM";
		public static final String SQL_INSERT = "INSERT INTO TABLE_NAME (LIMIT_MATRIX_ID, SP_ID, CURRENCY_ID,LIMIT_PERIOD_ID,MAX_AMOUNT "
				+ ",OPERATION_TYPE,RECORD_STATUS,CREATED_BY_EMP_ID,ACTIONED_BY_EMP_ID,ACTION_DATE,"
				+ "STORAGE_TYPE,CREATED_DATE) values (?,?,?,?,?,?,?,?,?,?,?,?)";
		public static final String SQL_SELECT_EXISTS = "SELECT LIMIT_MATRIX_ID FROM TABLE_NAME  WHERE SP_ID = ?  and CURRENCY_ID = ?  and  LIMIT_PERIOD_ID = ?  AND STORAGE_TYPE = ? AND RECORD_STATUS <> ?";

		public static final String SQL_UPDATE = new StringBuilder("UPDATE  TABLE_NAME   SET  SP_ID  = ? , ")
				.append(" CURRENCY_ID  = ? , LIMIT_PERIOD_ID = ? ,  MAX_AMOUNT = ? , ")
				.append(" OPERATION_TYPE  = ? , RECORD_STATUS  = ? ,STORAGE_TYPE  = ?  ,CREATED_DATE      = ?,CREATED_BY_EMP_ID  = ? ")
				.append(" WHERE LIMIT_MATRIX_ID = ? AND STORAGE_TYPE = ?").toString();

		public static final String SQL_SELECT = "SELECT A.*, B.MS_ID FROM TABLE_NAME A INNER JOIN SERVICE_PACKAGES B ON A.SP_ID = B.SP_ID WHERE LIMIT_MATRIX_ID = ? AND A.STORAGE_TYPE = ?";
		public static final String SQL_DELETE = "DELETE TABLE_NAME WHERE LIMIT_MATRIX_ID = ? AND STORAGE_TYPE=? ";
		public static final String SQL_UPDATE_STATUS = " UPDATE TABLE_NAME SET RECORD_STATUS = ?,ACTIONED_BY_EMP_ID = ?,ACTION_DATE = SYSDATE  WHERE LIMIT_MATRIX_ID = ? AND RECORD_STATUS = ? ";

	}

	public static class LIMIT_MATRICES_LEVEL_FOUR {
		private LIMIT_MATRICES_LEVEL_FOUR() {
			throw new IllegalStateException("LIMIT_MATRICES_LEVEL_FOUR class");
		}

		public static final String SEQ_NAME = "LIMIT_MATRIX_ID_SEQ";
		public static final String MASTER_TABLE = "LIMIT_MATRICES_LEVEL4";
		public static final String BPM_TABLE = "LIMIT_MATRICES_LEVEL4_BPM";
		public static final String SQL_INSERT = "INSERT INTO TABLE_NAME (LIMIT_MATRIX_ID, SP_ID,  TRANSFER_TYPE_ID,CURRENCY_ID,LIMIT_PERIOD_ID,MAX_AMOUNT,TOTAL_TRANSACTIONS "
				+ ",OPERATION_TYPE,RECORD_STATUS,CREATED_BY_EMP_ID,ACTIONED_BY_EMP_ID,ACTION_DATE,"
				+ "STORAGE_TYPE,CREATED_DATE) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		public static final String SQL_SELECT_EXISTS = "SELECT LIMIT_MATRIX_ID FROM TABLE_NAME  WHERE SP_ID = ?  and CURRENCY_ID = ? and TRANSFER_TYPE_ID = ? and  LIMIT_PERIOD_ID = ?  AND STORAGE_TYPE = ? AND RECORD_STATUS <> ?";

		public static final String SQL_UPDATE = new StringBuilder(
				"UPDATE  TABLE_NAME   SET  SP_ID  = ? ,  TRANSFER_TYPE_ID = ? ,  CURRENCY_ID  = ? ,  LIMIT_PERIOD_ID = ? ,  MAX_AMOUNT = ? ,  TOTAL_TRANSACTIONS    = ? ,  OPERATION_TYPE  = ? ,")
						.append(" RECORD_STATUS  = ? ,  STORAGE_TYPE  = ?  ,CREATED_DATE      = ?,CREATED_BY_EMP_ID  = ? ")
						.append(" WHERE  LIMIT_MATRIX_ID = ? AND STORAGE_TYPE = ?").toString();
		public static final String SQL_SELECT = "SELECT A.*, B.MS_ID FROM TABLE_NAME A INNER JOIN SERVICE_PACKAGES B ON A.SP_ID = B.SP_ID WHERE LIMIT_MATRIX_ID = ? AND A.STORAGE_TYPE = ?";
		public static final String SQL_DELETE = "DELETE TABLE_NAME WHERE LIMIT_MATRIX_ID = ? AND STORAGE_TYPE=? ";
		public static final String SQL_UPDATE_STATUS = " UPDATE TABLE_NAME SET RECORD_STATUS = ?,ACTIONED_BY_EMP_ID = ?,ACTION_DATE = SYSDATE  WHERE LIMIT_MATRIX_ID = ? AND RECORD_STATUS = ? ";

	}

	public static class LIMIT_GLOBAL_LIMITS {
		private LIMIT_GLOBAL_LIMITS() {
			throw new IllegalStateException("LIMIT_GLOBAL_LIMITS class");
		}

		public static final String SEQ_NAME = "LIMIT_MATRIX_ID_SEQ";
		public static final String MASTER_TABLE = "LIMIT_GLOBAL_LIMITS";
		public static final String BPM_TABLE = "LIMIT_GLOBAL_LIMITS_BPM";
		public static final String SQL_INSERT = "INSERT INTO TABLE_NAME (LIMIT_MATRIX_ID , TRANSFER_TYPE_ID , MIN_AMOUNT,  MAX_AMOUNT "
				+ ",OPERATION_TYPE,RECORD_STATUS,CREATED_BY_EMP_ID,ACTIONED_BY_EMP_ID,ACTION_DATE,"
				+ "STORAGE_TYPE,CREATED_DATE) values (?,?,?,?,?,?,?,?,?,?,?)";
		public static final String SQL_SELECT_EXISTS = "SELECT LIMIT_MATRIX_ID FROM TABLE_NAME  WHERE TRANSFER_TYPE_ID = ? AND STORAGE_TYPE = ? AND RECORD_STATUS <> ?";

		public static final String SQL_UPDATE = new StringBuilder(
				"UPDATE  TABLE_NAME   SET TRANSFER_TYPE_ID = ?, MIN_AMOUNT = ? , MAX_AMOUNT = ? ,  OPERATION_TYPE  = ? ,  RECORD_STATUS  = ? , ")
						.append(" STORAGE_TYPE  = ?  , CREATED_DATE  = ?, CREATED_BY_EMP_ID  = ? ")
						.append(" WHERE  LIMIT_MATRIX_ID = ? AND STORAGE_TYPE = ?").toString();

		public static final String SQL_SELECT = "SELECT * FROM TABLE_NAME  WHERE LIMIT_MATRIX_ID = ? AND STORAGE_TYPE = ?";
		public static final String SQL_DELETE = "DELETE TABLE_NAME WHERE LIMIT_MATRIX_ID = ? AND STORAGE_TYPE=? ";
		public static final String SQL_UPDATE_STATUS = " UPDATE TABLE_NAME SET RECORD_STATUS = ?,ACTIONED_BY_EMP_ID = ?,ACTION_DATE = SYSDATE  WHERE LIMIT_MATRIX_ID = ? AND RECORD_STATUS = ? ";
	}

	public static class GLOBAL_PAYEES {
		private GLOBAL_PAYEES() {
			throw new IllegalStateException("GLOBAL_PAYEES class");
		}

		public static final String SEQ_NAME = "GLOBAL_PAYEE_ID_SEQ";
		public static final String SEQ_NAME_FIELDS = "GLOBAL_PAYEE_FIELD_ID_SEQ";
		public static final String MASTER_TABLE = "PAYEE_GLOBAL_PAYEES";
		public static final String MASTER_TABLE_FIELDS = "PAYEE_GLOBAL_PAYEES_FIELDS";
		public static final String BPM_TABLE = "PAYEE_GLOBAL_PAYEES_BPM";
		public static final String BPM_TABLE_FIELDS = "PAYEE_GLOBAL_PAYEES_FIELDS_BPM";

		public static final String SQL_INSERT = " INSERT INTO TABLE_NAME  ( GLOBAL_PAYEE_ID ,PAYEE_TYPE_ID ,PAYEE_NAME_EN ,PAYEE_NAME_AR ,  PAYEE_ACCOUNT ,PAYEE_STATUS_ID ,MIN_AMOUNT ,MAX_AMOUNT ,OPERATION_TYPE ,RECORD_STATUS ,  STORAGE_TYPE ,ACTIONED_BY_EMP_ID ,CREATED_BY_EMP_ID ,ACTION_DATE ,CREATION_DATE, EMAIL, LARGE_ICON_URL, SMALL_ICON_URL )  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

		public static final String SQL_INSERT_FIELDS = new StringBuilder(
				" INSERT  INTO TABLE_NAME (FIELD_ID, GLOBAL_PAYEE_ID, FIELD_NAME_EN,  IS_VISIBLE, IS_MANDATORY, FIELD_LENGTH, LENGTH_TYPE, FIELD_TYPE,  VALIDATE_CIVIL_ID, START_WITH, OPERATION_TYPE, RECORD_STATUS, STORAGE_TYPE, ")
						.append(" ACTIONED_BY_EMP_ID, CREATED_BY_EMP_ID, ACTION_DATE, CREATION_DATE,FIELD_NAME_AR)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)")
						.toString();
		public static final String SQL_SELECT = "SELECT A.* FROM TABLE_NAME A  WHERE GLOBAL_PAYEE_ID = ? AND A.STORAGE_TYPE = ?";

		public static final String SQL_UPDATE = new StringBuilder(
				"UPDATE  TABLE_NAME  SET  GLOBAL_PAYEE_ID  = ? ,  PAYEE_TYPE_ID = ? ,  PAYEE_NAME_EN = ? ,  PAYEE_NAME_AR  = ? ,  PAYEE_ACCOUNT = ? ,  PAYEE_STATUS_ID = ? , ")
						.append(" MIN_AMOUNT    = ? , MAX_AMOUNT    = ? ,  OPERATION_TYPE  = ? ,  RECORD_STATUS  = ? ,  STORAGE_TYPE  = ?  , CREATION_DATE      = ?,CREATED_BY_EMP_ID  = ?, EMAIL = ? , ")
						.append(" LARGE_ICON_URL=?, SMALL_ICON_URL=? ")
						.append(" WHERE  GLOBAL_PAYEE_ID = ? AND STORAGE_TYPE = ?").toString();

		public static final String SQL_UPDATE_STATUS = " UPDATE TABLE_NAME SET RECORD_STATUS = ?,ACTIONED_BY_EMP_ID = ?,ACTION_DATE = SYSDATE  WHERE GLOBAL_PAYEE_ID = ? AND RECORD_STATUS = ? ";

		public static final String SQL_UPDATE_FIELDS = new StringBuilder("UPDATE  TABLE_NAME  SET ").append(
				" GLOBAL_PAYEE_ID = ? ,  FIELD_NAME_EN = ? ,  IS_VISIBLE  = ? ,  IS_MANDATORY = ? ,  FIELD_LENGTH = ? ,  LENGTH_TYPE = ? ,")
				.append(" FIELD_TYPE = ? , VALIDATE_CIVIL_ID = ? ,  START_WITH = ? , OPERATION_TYPE  = ? ,  RECORD_STATUS  = ? ,  STORAGE_TYPE  = ?  , CREATION_DATE  = ?,")
				.append("CREATED_BY_EMP_ID  = ?, FIELD_NAME_AR  = ?  WHERE  FIELD_ID = ? AND STORAGE_TYPE = ?")
				.toString();

		public static final String SQL_UPDATE_STATUS_FIELDS = " UPDATE TABLE_NAME SET RECORD_STATUS = ?,ACTIONED_BY_EMP_ID = ?, ACTION_DATE = SYSDATE  WHERE GLOBAL_PAYEE_ID = ? AND RECORD_STATUS = ? ";

		public static final String SQL_DELETE = "DELETE TABLE_NAME WHERE GLOBAL_PAYEE_ID = ? AND STORAGE_TYPE=? ";

		public static final String SQL_SELECT_EXISTS = "SELECT GLOBAL_PAYEE_ID FROM TABLE_NAME  WHERE (PAYEE_NAME_EN = ? or PAYEE_NAME_AR = ?) AND STORAGE_TYPE = ? AND RECORD_STATUS <> ?";

		public static final String SQL_SELECT_MASTER_GLOBAL_PAYEES = "SELECT GLOBAL_PAYEE_ID,PAYEE_TYPE_ID,PAYEE_NAME_EN,PAYEE_NAME_AR,PAYEE_ACCOUNT,PAYEE_STATUS_ID, MIN_AMOUNT,MAX_AMOUNT,OPERATION_TYPE,RECORD_STATUS,STORAGE_TYPE,ACTIONED_BY_EMP_ID, CREATED_BY_EMP_ID,ACTION_DATE, CREATION_DATE FROM PAYEE_GLOBAL_PAYEES WHERE PAYEE_TYPE_ID=? AND RECORD_STATUS=? AND PAYEE_STATUS_ID=?";

		public static final String SQL_SELECT_DETAILS_GLOBAL_PAYEES = "SELECT FIELD_ID,IS_VISIBLE,IS_MANDATORY,FIELD_LENGTH,LENGTH_TYPE,FIELD_TYPE,VALIDATE_CIVIL_ID, START_WITH,OPERATION_TYPE,STORAGE_TYPE,ACTIONED_BY_EMP_ID,CREATED_BY_EMP_ID,FIELD_NAME_EN, FIELD_NAME_AR FROM PAYEE_GLOBAL_PAYEES_FIELDS WHERE GLOBAL_PAYEE_ID = ? AND RECORD_STATUS=?";
	}

	public static class GLOBAL_MESSAGES {
		private GLOBAL_MESSAGES() {
			throw new IllegalStateException("GLOBAL_MESSAGES class");
		}

		public static final String SEQ_NAME = "GLOBAL_MSG_ID_SEQ";
		public static final String SEQ_CUSTS_GLOBAL_MSG_PREF = "CUSTS_GLOBAL_MSG_PREF_SEQ";
		public static final String MASTER_TABLE = "GLOBAL_MSG_MESSAGES";
		public static final String BPM_TABLE = "GLOBAL_MSG_MESSAGES_BPM";

		public static final String SQL_INSERT = new StringBuilder(
				"INSERT INTO TABLE_NAME (CUST_TYPE_ID,GLOBAL_MSG_ID,BANK_ID,FROM_AGNENT, SUBJECT,BODY,GLOBAL_MSG_STATUS_ID,")
						.append("GLOBAL_MSG_TYPE_ID,COLOR,GLOBAL_MSG_PRIORITY_ID,LOGICAL_OPERATION,")
						.append("VALID_FROM_DATE,VALID_TO_DATE,")
						.append("RECEIVER_TYPE_ID,RECEIVER_LIST_ITEM,COLS_LABELS,")
						.append("OPERATION_TYPE,RECORD_STATUS,CREATED_BY_EMP_ID,ACTIONED_BY_EMP_ID,ACTION_DATE,")
						.append("STORAGE_TYPE,CREATED_DATE,PRODUCT_TYPE_ID,")
						.append("ASSIGNED_TO_CHANNEL_ID,CREATED_BY_CHANNEL_ID,ENABLE_CUST_RESPONSE,REDIRECT_TO_SCREEN) ")
						.append(" values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)").toString();

		public static final String SQL_UPDATE = new StringBuilder(
				"UPDATE  TABLE_NAME   SET  CUST_TYPE_ID  = ? ,  BANK_ID  = ? ,  FROM_AGNENT = ? , ").append(
						" SUBJECT = ? , BODY  = ? , GLOBAL_MSG_STATUS_ID = ? , GLOBAL_MSG_TYPE_ID = ? , COLOR    = ? , GLOBAL_MSG_PRIORITY_ID  = ? , ")
						.append(" LOGICAL_OPERATION = ? ,  VALID_FROM_DATE = ? ,  VALID_TO_DATE = ? ,  RECEIVER_TYPE_ID = ? ,  RECEIVER_LIST_ITEM = ? , ")
						.append(" COLS_LABELS  = ? , OPERATION_TYPE  = ? ,  RECORD_STATUS  = ? ,  STORAGE_TYPE  = ?  ,")
						.append(" CREATED_DATE  = ?, CREATED_BY_EMP_ID  = ? ,PRODUCT_TYPE_ID = ?,ASSIGNED_TO_CHANNEL_ID = ?,CREATED_BY_CHANNEL_ID = ? , ENABLE_CUST_RESPONSE = ?,REDIRECT_TO_SCREEN = ? ")
						.append(" WHERE  GLOBAL_MSG_ID = ? AND STORAGE_TYPE = ?").toString();

		public static final String SQL_SELECT = "SELECT A.* FROM TABLE_NAME A  WHERE GLOBAL_MSG_ID = ? AND A.STORAGE_TYPE = ?";
		public static final String SQL_DELETE = "DELETE TABLE_NAME WHERE GLOBAL_MSG_ID = ? AND STORAGE_TYPE=? ";

		public static final String SQL_UPDATE_STATUS = new StringBuilder(
				" UPDATE TABLE_NAME SET RECORD_STATUS = ?,ACTIONED_BY_EMP_ID = ?,ACTION_DATE = SYSDATE  ")
						.append(" WHERE GLOBAL_MSG_ID = ? AND RECORD_STATUS = ? ").toString();

		public static final String SQL_INSERT_RESP = new StringBuilder(
				"INSERT INTO CUSTS_GLOBAL_MSG_PREF (GLOBAL_MSG_ID, RESPONSE_TYPE_ID,CHANNEL_ID,CUSTOMER_ID,")
						.append(" RESPONSE_TIME, LEAD_REF,CUST_MSG_RESPONSE_ID,REMARKS) ")
						.append(" VALUES (?, ? ,? , ? , ? , ? , ?, ?)").toString();

		public static final String SQL_UPDATE_RESP = "UPDATE CUSTS_GLOBAL_MSG_PREF set RESPONSE_TYPE_ID = ? ,CHANNEL_ID = ?,RESPONSE_TIME = ?,LEAD_REF = ?,REMARKS = ? WHERE CUST_MSG_RESPONSE_ID = ?";
	}

	/**
	 * @author afayad
	 * @version 1.0
	 * @since 14/10/2011
	 */
	public static class EMP_EMPLOYEES {
		private EMP_EMPLOYEES() {
			throw new IllegalStateException("EMP_EMPLOYEES class");
		}

		public static final String TABLE_EMP_EMPLOYEES = "EMP_EMPLOYEES";
		public static final String TABLE_EMP_EMPLOYEES_BPM = "EMP_EMPLOYEES_BPM";
		public static final String SEQ_EMP_ID_SEQ = "EMP_ID_SEQ";

		public static final String SQL_INSERT_EMP_EMPLOYEES = new StringBuilder(
				" INSERT INTO TABLE_NAME (EMP_ID, First_NAME, Last_NAME,USER_NAME, EMAIL, ")
						.append(" PHONE_NO, IMMEDIATE_SUPERVISER, ROLE_ID,EMP_STATUS_TYPE_ID,SUPER_USER,PASSWORD,")
						.append(" OPERATION_TYPE,RECORD_STATUS,CREATED_BY_EMP_ID,ACTIONED_BY_EMP_ID,ACTION_DATE,")
						.append(" STORAGE_TYPE,CREATED_DATE,ALLOW_OWN_APPROVAL,BANK_ID) ")
						.append(" VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)").toString();

		public static final String SQL_UPDATE_EMP_EMPLOYEES = new StringBuilder(
				" UPDATE TABLE_NAME  SET First_NAME = ?,Last_NAME = ?, USER_NAME = ?, EMAIL = ?, PHONE_NO = ?, IMMEDIATE_SUPERVISER = ?, ROLE_ID = ?, EMP_STATUS_TYPE_ID = ?, ")
						.append(" SUPER_USER = ?, OPERATION_TYPE = ?, RECORD_STATUS = ?, PASSWORD = ?, CREATED_DATE = ?, CREATED_BY_EMP_ID = ?, ALLOW_OWN_APPROVAL = ?, BANK_ID = ?")
						.append(" WHERE EMP_ID = ? AND STORAGE_TYPE = ?").toString();

		public static final String SQL_UPDATE_STATUS_EMP_EMPLOYEES = " UPDATE TABLE_NAME SET RECORD_STATUS = ?,ACTIONED_BY_EMP_ID = ?,ACTION_DATE = SYSDATE  WHERE EMP_ID = ? AND RECORD_STATUS = ? ";
		public static final String SQL_SELECT_EMP_EMPLOYEES = "SELECT * FROM TABLE_NAME WHERE EMP_ID = ? AND STORAGE_TYPE = ?";
		public static final String SQL_DELETE_EMP_EMPLOYEES = "DELETE TABLE_NAME WHERE EMP_ID=? AND STORAGE_TYPE=? ";
		public static final String SQL_UPDATE_CHANGE_SKEY_EMP_EMPLOYEES = "UPDATE  TABLE_NAME SET CHANGE_PASSWORD = ? WHERE EMP_ID = ? AND STORAGE_TYPE = ?";
		public static final String SQL_UPDATE_CHANGE_MY_SKEY_EMP_EMPLOYEES = "UPDATE  TABLE_NAME SET password = ? WHERE EMP_ID = ? AND STORAGE_TYPE = ?";
		public static final String SQL_SELECT_EXISTS = "SELECT EMP_ID FROM TABLE_NAME  WHERE (USER_NAME = ?) AND STORAGE_TYPE = ? AND RECORD_STATUS <> ?";

	}

	/**
	 * @author Emad M Al-Buloushi
	 * @version 1.0
	 * @since 17/10/2011
	 */
	public static class GLOBAL_CONFIGURATION {
		private GLOBAL_CONFIGURATION() {
			throw new IllegalStateException("GLOBAL_CONFIGURATION class");
		}

		public static final String TABLE_NAME = "CONFIG_GLOBAL_SETUP";
		public static final String SELECT = "SELECT * FROM CONFIG_GLOBAL_SETUP WHERE ITEM_ID=?";
		public static final String SELECT_FILTERED_CONFIG = "SELECT * FROM CONFIG_GLOBAL_SETUP WHERE cast(ITEM_ID as number) NOT IN (2,4,6,7,9,10,11,12,20,21,24,25,27,29,30,31,47, 56,57, 61, 62) order by cast(ITEM_ID as number)";
		public static final String UPDATE = "UPDATE CONFIG_GLOBAL_SETUP SET ITEM_VALUE = ? WHERE ITEM_ID = ?";
		public static final String SELECT_ALL = "SELECT * FROM CONFIG_GLOBAL_SETUP  order by cast(ITEM_ID as number)";

	}

	public static class BO_CORP_GLOBAL_CONFIGURATION {
		private BO_CORP_GLOBAL_CONFIGURATION() {
			throw new IllegalStateException("BO_CORP_GLOBAL_CONFIGURATION class");
		}

		public static final String TABLE_NAME = ORACLE_SCHEMAS.BBYNCORPORATE + "CORP_GLOBAL_CONFIG";
		public static final String SELECT = "SELECT ITEM_VALUE FROM " + ORACLE_SCHEMAS.BBYNCORPORATE
				+ "CORP_GLOBAL_CONFIG WHERE ITEM_ID=?";
		public static final String UPDATE = "UPDATE " + ORACLE_SCHEMAS.BBYNCORPORATE
				+ "CORP_GLOBAL_CONFIG SET ITEM_VALUE = ? WHERE ITEM_ID = ?";
		public static final String CHARGE_SCHEMA_SELECT = "SELECT CHARGE_SCHEMA_ID, BANK_CODE, CHARGE_SCHEMA FROM "
				+ ORACLE_SCHEMAS.BBYNCORPORATE + "CORP_CHARGE_SCHEMAS";
		public static final String CHARGE_SCHEMA_DELETE_ALL = "DELETE FROM " + ORACLE_SCHEMAS.BBYNCORPORATE
				+ "CORP_CHARGE_SCHEMAS";
		public static final String CHARGE_SCHEMA_INSERT = "INSERT INTO " + ORACLE_SCHEMAS.BBYNCORPORATE
				+ "CORP_CHARGE_SCHEMAS (CHARGE_SCHEMA_ID, BANK_CODE, CHARGE_SCHEMA) VALUES(?, ?, ?)";
	}

	public static class BO_ACCOUNT_TYPE {
		private BO_ACCOUNT_TYPE() {
			throw new IllegalStateException("BO_ACCOUNT_TYPE class");
		}

		public static final String TABLE_NAME = "BO_ACCOUNT_TYPE";
		public static final String SELECT = "SELECT ITEM_VALUE FROM CBO_ACCOUNT_TYPE WHERE ITEM_ID=?";
		public static final String UPDATE = "UPDATE BO_ACCOUNT_TYPE SET ITEM_VALUE = ? WHERE ITEM_ID = ?";
	}

	/**
	 * @author afayad
	 */
	public static class TRANS_DETAILED_FIELDS {
		private TRANS_DETAILED_FIELDS() {
			throw new IllegalStateException("TRANS_DETAILED_FIELDS class");
		}

		public static final int TRANSFER_CROSS_RATE = 1;
		public static final int TRANSFER_AMOUNT_IN_KD = 2;
		public static final int TO_BROKERAGE_ACC = 3;
		public static final int TO_ACCOUNT_ADDRESS = 4;
		public static final int TO_ACC_RATE = 5;
		public static final int TO_ACC_NAME = 6;
		public static final int TO_ACC_CURRENCY = 7;
		public static final int TO_ACC_AMOUNT_IN_KD = 8;
		public static final int TO_ACC_AMOUNT = 9;
		public static final int MEMO = 10;
		public static final int INTERMEDIATE_BANK_SWIFT_CODE = 11;
		public static final int INTERMEDIATE_BANK_NAME = 12;
		public static final int INTERMEDIATE_BANK_COUNTRY_NAME = 13;
		public static final int INTERMEDIATE_BANK_COUNTRY_ID = 14;
		public static final int INTERMEDIATE_BANK_ACC_WITHIN_INTER = 15;
		public static final int FROM_ACC_RATE = 16;
		public static final int FROM_ACC_CURRENCY = 17;
		public static final int FROM_ACC_AMOUNT_IN_KD = 18;
		public static final int FROM_ACC_AMOUNT = 19;
		public static final int CUSTOMER_NUMBER = 20;
		public static final int CARD_NUMBER = 21;
		public static final int BENEFICIARY_BRANCH_NAME = 22;
		public static final int BENEFICIARY_BANK_SWIFT_CODE = 23;
		public static final int BENEFICIARY_BANK_NAME = 24;
		public static final int BENEFICIARY_BANK_COUNTRY_NAME = 25;
		public static final int BENEFICIARY_BANK_COUNTRY_ID = 26;
		public static final int IMAL_OP_NO = 33;
		public static final int IMAL_REFERENCE_NO = 34;
		public static final int IMAL_ERROR_DESCRIPTION = 35;
		public static final int TRANSACTON_BRANCH = 36;
		public static final int SERVICE_CODE = 37;
		public static final int TRANSFER_TYPE = 38;
		public static final int TRANSFER_CURRENCY = 39;
		public static final int TO_MOBILE_NUMBER = 40;
		public static final int CUST_PAYEE_ID = 41;

	}

	/**
	 * @author Ahamed Fozil
	 * @version 1.0
	 * @since 25-OCT-2011 Constants when calling Payments API - Credit Card Payment;
	 *        Finance/Morabaha Payments; Bill Payments (JV)
	 */
	public static class PAYMENTS_API_CONSTANTS {
		private PAYMENTS_API_CONSTANTS() {
			throw new IllegalStateException("PAYMENTS_API_CONSTANTS class");
		}

		public static final String COMPANY_CODE = "1";
		public static final String ACCOUNT_BRANCH_CODE = null;
		public static final String ACCOUNT_CURRENCY_CODE = null;
		public static final String ACCOUNT_GL_CODE = null;
		public static final String ACCOUNT_CIF_SUB_NO = null;
		public static final String ACCOUNT_SERIAL_NO = null;
		public static final String TERMINAL_ID = "IB";
		public static final String CREATED_BY = "e-Banking";
		public static final String TRANSACTON_BRANCH = "998";
		public static final String AUTHORIZED_BY = "e-Banking";
		public static final String TRANSACTION_ORIGIN = "E";
	}

	public static class CREDIT_CARD_PAYMENTS_API_CONSTANTS extends PAYMENTS_API_CONSTANTS {
		private CREDIT_CARD_PAYMENTS_API_CONSTANTS() {
			throw new IllegalStateException("CREDIT_CARD_PAYMENTS_API_CONSTANTS class");
		}

		public static final int SERVICE_CODE = 212;
		public static final String JV_REFERENCE = null;
		public static final int JV_TYPE = 532;
		public static final int TRANSACTION_TYPE = 46;
	}

	public static class MORABAHA_PAYMENTS_API_CONSTANTS extends PAYMENTS_API_CONSTANTS {
		private MORABAHA_PAYMENTS_API_CONSTANTS() {
			throw new IllegalStateException("MORABAHA_PAYMENTS_API_CONSTANTS class");
		}

		public static final String CREATED_BY = "eBanking";
		public static final String AUTHORIZED_BY = "eBanking";
	}

	public static class BILL_PAYMENTS_API_CONSTANTS extends PAYMENTS_API_CONSTANTS {
		private BILL_PAYMENTS_API_CONSTANTS() {
			throw new IllegalStateException("BILL_PAYMENTS_API_CONSTANTS class");
		}

		public static final int SERVICE_CODE = 1;
		public static final int WATANIYA_SERVICE_CODE = 210;
		public static final int WATANIYA_JV_TYPE_CODE = 547;
		public static final int WATANIYA_TRANS_TYPE_CODE = 547;
		public static final int LINE_NO = 1;
		public static final char TRANSACTION_SIGN = 'D'; // for debit
		public static final String OVERRIDE = null; // for debit
		public static final char BEGIN_TRANSACTION_FLAG = 'Y';
		public static final char END_TRANSACTION_FLAG = 'Y';
		public static final String API_CODE = "205";
		public static final String BRANCH_CODE = "998";
		public static final String IB_TELLER = "99999";
		public static final String MB_TELLER = "90219";
		public static final String TRX_TYPE = "112";
		public static final String CARD_ACCOUNT = "0";
		public static final String REFERENCE = "1@2-3";
		public static final String POS = "0";
		public static final String APPROVED_TRX = "1";

	}

	public static class CHARITY_API_CONSTANTS extends PAYMENTS_API_CONSTANTS {
		private CHARITY_API_CONSTANTS() {
			throw new IllegalStateException("CHARITY_API_CONSTANTS class");
		}

		// TODO: check with AbdulMeneam about the TRX type.
		// his eg. shows 3 while the original TRX type is 109; TELLER Code too.
		// originally it is 99999, his eg. is 255
		public static final String TRX_TYPE = "109";
		public static final String MACHINE_NAME = "imalp1";
		public static final String TELLER = "255";
		public static final String IB_USER = "IBUSR";
		public static final String MB_USER = "MBUSR";
	}

	public static class ISLAMIC_PAYMENT_API_CONSTANTS extends PAYMENTS_API_CONSTANTS {
		private ISLAMIC_PAYMENT_API_CONSTANTS() {
			throw new IllegalStateException("ISLAMIC_PAYMENT_API_CONSTANTS class");
		}

		public static final int BRANCH_CODE = 27;
		public static final int DEAL_NUMBER = 28;
		public static final int CIF_NUMBER = 29;
		public static final int DEBIT_ACCOUNT_NUMBER = 30;
		public static final int TRANSACTION_DATE = 31;
		public static final int SETTLEMENT_NUMBER = 32;
	}

	public static class BENEFICIARY_CONSTANTS {
		private BENEFICIARY_CONSTANTS() {
			throw new IllegalStateException("ISLAMIC_PAYMENT_API_CONSTANTS class");
		}

		public static final String COMPANY_CODE = "1";
		public static final String TRANSFER_TYPE = "I";
	}

	/**
	 * @author hkhwileh
	 * @since 14-12-2013
	 */
	public static class CUSTS_T_AND_C_AGREEMENT {
		private CUSTS_T_AND_C_AGREEMENT() {
			throw new IllegalStateException("WU_CUSTS_T_AND_C_AGREEMENT class");
		}

		public static final String TABLE_NAME = "WU_CUSTS_T_AND_C_AGREEMENT";
		public static final String CUST_ID = "CUST_ID";
		public static final String CIF = "CIF";
		public static final String HAS_ACCEPTED = "HAS_ACCEPTED";
		public static final String T_AND_C_VERSION = "HAS_ACCEPTED";
		public static final String AGREEMENT_DATE = "AGREEMENT_DATE";
		public static final String INSERT_CUST_INFO = "INSERT INTO WU_CUSTS_T_AND_C_AGREEMENT (CUST_ID, CIF, T_AND_C_VERSION, HAS_ACCEPTED, AGREEMENT_DATE)"
				+ "VALUES ('?', '?', '1', '1',TO_DATE(?,'DD-MM-YY'))";
		public static final String WESTERN_UNION_SERVICE = "Western Union";
		public static final String SERVICE_NAME = "SERVICE_NAME";
		public static final String AUTO_ENABLED_AUTO_CASHBACK_SERVICE = "Default Enabled Auto Cashback";
	}

	/**
	 * @author Hassan khwileh
	 * @since 14-12-2013
	 */
	public static class CUSTS_PROFILES {
		private CUSTS_PROFILES() {
			throw new IllegalStateException("CUSTS_PROFILES class");
		}

		public static final String TABLE_NAME = "CUSTS_PROFILES";
		public static final String CUST_ID = "CUST_ID";
		public static final String CIF = "CIF";
		public static final String CIVIL_ID = "CIVIL_ID";

	}

	public static class WU_CUSTS_SEND_MONEY {
		private WU_CUSTS_SEND_MONEY() {
			throw new IllegalStateException("WU_CUSTS_SEND_MONEY class");
		}

		public static final String TABLE_NAME = "WU_CUSTS_SEND_MONEY";

		public static final String INSERT = new StringBuilder("INSERT INTO WU_CUSTS_SEND_MONEY(")
				.append("CUST_ID,SENDER_CIF,PREFERRED_CUSTOMER_NUMBER,PROMOTION_CODE,PROMOTION_NAME,")
				.append("PROMOTION_DESC,PROMOTION_DISCOUNT,PROMOTION_MESSAGE ,BENEFICIARY_SLNO  ,BENEFICIARY_FIRST_NAME,")
				.append("BENEFICIARY_LAST_NAME ,ORIG_PRINCIPAL_AMOUNT ,ORIG_GROSS_AMOUNT ,ORIG_CURRENCY_CODE,ORIG_COUNTRY_CODE ,")
				.append("DEST_EXPECTED_PAYOUT_AMOUNT,DEST_CURRENCY_ISO_CODE,DEST_COUNTRY_ISO_CODE ,DEST_STATE_CODE,DEST_CITY_CODE,")
				.append("MUNICIPAL_TAX ,STATE_TAX ,COUNTY_TAX,BASE_CHARGES  ,DELIVERY_CHARGES  ,OTHER_CHARGES ,")
				.append("EXCHANGE_RATE ,IDENTIFICATION_QUESTION  ,IDENTIFICATION_QUESTION_ANSWER,TRANSACTION_DATE_TIME ,STAGE_ID  ,")
				.append("TRANSACTION_STATUS,COMMENTS  ,TRANSACTION_ID,TRANSACTION_DIGEST,NEW_POINTS_EARNED ,")
				.append("MTCN_DATE ,MTCN,NOTIFICATION_TYPE ,NOTIFICATION_MESSAGE_CODE,NOTIFICATION_MESSAGE_TEXT,")
				.append("TRANSFER_COUNTRY_CODE ,TRANSFER_CURRENCY_CODE,IMAL_PRINCIPAL_TRACKING_NUMBER,IMAL_CHARGES_TRACKING_NUMBER,")
				.append("IMAL_BLOCK_TRACKING_NUMBER ,IMAL_TRANSACTION_STATUS,SENDER_DEBIT_ACCOUNT, BBYN_TRANSACTION_DATE_TIME,TEMP_TRANSACTION_ID) ")
				.append("VALUES(").append("?,?,?,?,?,?,?,?,?,?,").append("?,?,?,?,?,?,?,?,?,?,")
				.append("?,?,?,?,?,?,?,?,?,?,").append("?,?,?,?,?,?,?,?,?,?,").append("?,?,?,?,?,?,?,?,?,?)")
				.toString();

	}

	public static class WU_CUSTS_REFUND_MONEY {
		private WU_CUSTS_REFUND_MONEY() {
			throw new IllegalStateException("WU_CUSTS_REFUND_MONEY class");
		}

		public static final String TABLE_NAME = "WU_CUSTS_REFUND_MONEY ";

		public static final String INSERT = new StringBuilder("INSERT INTO WU_CUSTS_REFUND_MONEY(").append(
				"CUST_ID ,RECEIVER_CIF , BANK_ACCOUNT_NUMBER , ORIG_PRINCIPAL_AMOUNT, ORIG_GROSS_AMOUNT, ORIG_CURRENCY_CODE,")
				.append("ORIG_COUNTRY_CODE, DEST_EXPECTED_PAYOUT_AMOUNT, DEST_ACTUAL_PAYOUT_AMOUNT, DEST_CURRENCY_ISO_CODE,")
				.append("DEST_COUNTRY_ISO_CODE,  TRANSACTION_STATUS_CODE,TRANSACTION_STATUS_MESSAGE, TRANSACTION_STATUS_REFERENCE,")
				.append("TRANSACTION_DATE_TIME,TRANSACTION_ID,MTCN_DATE,MTCN,BBYN_TRANSACTION_DATE_TIME) ")
				.append("VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)").toString();
	}

	public static class WESTERN_UNION {
		private WESTERN_UNION() {
			throw new IllegalStateException("WESTERN_UNION class");
		}

		public static final String WU_COUNTRIES = "SELECT WU_COUNTRIES_MASTER.*,WU_COUNTRIES_MASTER.COUNTRY_LONG, WU_COUNTRIES_MASTER.SERVICE_FLAGS,  WU_COUNTRIES_MASTER.COUNTRY_SHORT,  WU_COUNTRIES_MASTER.ISO_COUNTRY_CD,  WU_COUNTRIES_MASTER_EXTRAINFO.IS_STATE_REQUIRED FROM WU_COUNTRIES_MASTER INNER JOIN WU_COUNTRIES_MASTER_EXTRAINFO ON WU_COUNTRIES_MASTER.ISO_COUNTRY_CD = WU_COUNTRIES_MASTER_EXTRAINFO.ISO_COUNTRY_CD";
		public static final String WU_CUSTS_SEND_MONEY_LIST = new StringBuilder(
				" SELECT CUST_ID,  SENDER_CIF,  PREFERRED_CUSTOMER_NUMBER,  PROMOTION_CODE,  PROMOTION_NAME,  ")
						.append(" PROMOTION_DESC,  PROMOTION_DISCOUNT,  PROMOTION_MESSAGE,  BENEFICIARY_SLNO,   ")
						.append("BENEFICIARY_FIRST_NAME,  BENEFICIARY_LAST_NAME,  ORIG_PRINCIPAL_AMOUNT,  ")
						.append(" ORIG_GROSS_AMOUNT,  ORIG_CURRENCY_CODE,  ORIG_COUNTRY_CODE,  DEST_EXPECTED_PAYOUT_AMOUNT,   ")
						.append(" DEST_CURRENCY_ISO_CODE,  DEST_COUNTRY_ISO_CODE, DEST_STATE_CODE,  DEST_CITY_CODE,   ")
						.append(" MUNICIPAL_TAX,  STATE_TAX,  COUNTY_TAX,  BASE_CHARGES,  DELIVERY_CHARGES,  OTHER_CHARGES,   ")
						.append(" EXCHANGE_RATE,  IDENTIFICATION_QUESTION,  IDENTIFICATION_QUESTION_ANSWER,  TRANSACTION_DATE_TIME,   ")
						.append(" STAGE_ID,  TRANSACTION_STATUS,  COMMENTS,  TRANSACTION_ID,  TRANSACTION_DIGEST,  NEW_POINTS_EARNED,  MTCN_DATE,  ")
						.append(" MTCN,  NOTIFICATION_TYPE,  NOTIFICATION_MESSAGE_CODE,  NOTIFICATION_MESSAGE_TEXT,  TRANSFER_COUNTRY_CODE,  ")
						.append(" TRANSFER_CURRENCY_CODE, BBYN_TRANSACTION_DATE_TIME,ISREFUNDED, COUNTRY_LONG  ")
						.append(" FROM 	WU_CUSTS_SEND_MONEY LEFT OUTER JOIN WU_COUNTRIES_MASTER ON WU_CUSTS_SEND_MONEY.DEST_COUNTRY_ISO_CODE  = WU_COUNTRIES_MASTER.ISO_COUNTRY_CD")
						.append(" WHERE SENDER_CIF =? ORDER BY  BBYN_TRANSACTION_DATE_TIME DESC ").toString();

		public static final String WU_CUSTS_SEND_MONEY = new StringBuilder(
				"  SELECT sm.CUST_ID,  sm.SENDER_CIF,  sm.PREFERRED_CUSTOMER_NUMBER,  sm.PROMOTION_CODE,  sm.PROMOTION_NAME,  sm.PROMOTION_DESC,  sm.PROMOTION_DISCOUNT,  sm.PROMOTION_MESSAGE, ")
						.append(" sm.BENEFICIARY_SLNO,  sm.BENEFICIARY_FIRST_NAME,  sm.BENEFICIARY_LAST_NAME,  sm.ORIG_PRINCIPAL_AMOUNT,  sm.ORIG_GROSS_AMOUNT,  sm.ORIG_CURRENCY_CODE,  sm.ORIG_COUNTRY_CODE,  ")
						.append(" sm.DEST_EXPECTED_PAYOUT_AMOUNT,  cy.CURRENCY_NAME, sm.DEST_CURRENCY_ISO_CODE,  cntry.COUNTRY_LONG, sm.DEST_COUNTRY_ISO_CODE, sm.DEST_STATE_CODE, sm.DEST_CITY_CODE, sm.MUNICIPAL_TAX,  sm.STATE_TAX,  sm.COUNTY_TAX,  ")
						.append(" sm.BASE_CHARGES,  sm.DELIVERY_CHARGES,  sm.OTHER_CHARGES,  sm.EXCHANGE_RATE,  sm.IDENTIFICATION_QUESTION,  sm.IDENTIFICATION_QUESTION_ANSWER,  sm.TRANSACTION_DATE_TIME,  sm.STAGE_ID,  ")
						.append(" sm.TRANSACTION_STATUS,  sm.COMMENTS,  sm.TRANSACTION_ID,  sm.TRANSACTION_DIGEST,  sm.NEW_POINTS_EARNED,  sm.MTCN_DATE,  sm.MTCN,  sm.NOTIFICATION_TYPE,  ")
						.append(" sm.NOTIFICATION_MESSAGE_CODE,  sm.NOTIFICATION_MESSAGE_TEXT,  sm.TRANSFER_COUNTRY_CODE,  sm.TRANSFER_CURRENCY_CODE,sm.SENDER_DEBIT_ACCOUNT, sm.BBYN_TRANSACTION_DATE_TIME,sm.ISREFUNDED FROM WU_CUSTS_SEND_MONEY  sm inner join ")
						.append(" WU_COUNTRIES_MASTER cntry on sm.DEST_COUNTRY_ISO_CODE = cntry.ISO_COUNTRY_CD inner join WU_CURRENCIES_MASTER cy on sm.DEST_CURRENCY_ISO_CODE = cy.CURRENCY_CD WHERE MTCN =?")
						.toString();

		public static final String WU_UPDATE_CUSTS_SEND_MONEY_TRANSACTION_ID = new StringBuilder(
				"UPDATE WU_CUSTS_SEND_MONEY ").append("SET TRANSACTION_STATUS =?, ").append("ISREFUNDED =? ")
						.append("WHERE ").append("MTCN =? ").toString();

		public static final String WU_CUSTS_REFUND_MONEY = "SELECT CUST_ID,RECEIVER_CIF, BANK_ACCOUNT_NUMBER , ORIG_PRINCIPAL_AMOUNT, ORIG_GROSS_AMOUNT, ORIG_CURRENCY_CODE , ORIG_COUNTRY_CODE, DEST_EXPECTED_PAYOUT_AMOUNT , DEST_ACTUAL_PAYOUT_AMOUNT, DEST_CURRENCY_ISO_CODE , DEST_COUNTRY_ISO_CODE, TRANSACTION_STATUS_CODE, TRANSACTION_STATUS_MESSAGE , TRANSACTION_STATUS_REFERENCE , TRANSACTION_DATE_TIME , TRANSACTION_ID, MTCN_DATE, MTCN, BBYN_TRANSACTION_DATE_TIME FROM WU_CUSTS_REFUND_MONEY where MTCN=?";

		public static final String WU_ALL_COUNTRIES = new StringBuilder(
				"SELECT WU_COUNTRIES_MASTER.COUNTRY_LONG, WU_COUNTRIES_MASTER.COUNTRY_SHORT,").append(
						" WU_COUNTRIES_MASTER.SERVICE_FLAGS, WU_COUNTRIES_MASTER.ISO_COUNTRY_CD,    WU_COUNTRIES_MASTER.COUNTRY_LONG_AR,")
						.append(" WU_COUNTRIES_MASTER.LAST_UPDATED_TIME,wu_countries_master_extrainfo.is_permitted, wu_countries_master_extrainfo.is_state_required,")
						.append(" wu_countries_master_extrainfo.remarks from WU_COUNTRIES_MASTER left JOIN wu_countries_master_extrainfo on")
						.append(" WU_COUNTRIES_MASTER.ISO_COUNTRY_CD = wu_countries_master_extrainfo.ISO_COUNTRY_CD")
						.toString();

		public static final String WU_STATES = "SELECT WU_STATES_MASTER.STATE_CD,WU_STATES_MASTER.STATE_NAME,WU_STATES_MASTER.ISO_COUNTRY_CD FROM WU_STATES_MASTER WHERE WU_STATES_MASTER.ISO_COUNTRY_CD = ?";

		public static final String WU_SELECT_STATE_CODE_OF_STATE_NAME = "SELECT WU_STATES_MASTER.STATE_CD FROM WU_STATES_MASTER WHERE lower(WU_STATES_MASTER.ISO_COUNTRY_CD) = ? AND lower(WU_STATES_MASTER.STATE_NAME) =? ";

		public static final String WU_INSERT_COUNTRY_EXTRA_INFO = new StringBuilder(
				"INSERT INTO WU_COUNTRIES_MASTER_EXTRAINFO(ISO_COUNTRY_CD,IS_PERMITTED,IS_STATE_REQUIRED,REMARKS) ")
						.append(" VALUES(?,?,?,?)").toString();
		public static final String WU_UPDATE_COUNTRY_EXTRA_INFO = "";

		public static final String WU_SAVE_COUNTRY = "CALL PROC_WU_SAVE_DEST_COUNTRY (?,?,?,?,?,?,?,?,?,?,?)";
		public static final String WU_SAVE_CURRENCY = "CALL PROC_WU_SAVE_DEST_CURRENCY (?,?,?,?,?)";
		public static final String WU_SAVE_STATE = "CALL PROC_WU_SAVE_STATE (?,?,?,?,?)";
		public static final String WU_SAVE_MEXICO_CITYSTATE = "CALL PROC_WU_SAVE_MEXICO_CITYSTATE (?,?,?,?,?)";

	}

	public static class TRAVEL_NOTIFICATION {
		private TRAVEL_NOTIFICATION() {
			throw new IllegalStateException("TRAVEL_NOTIFICATION class");
		}

		public static final String TABLE_NAME = "CUSTS_TRAVEL_NOTIFICATION";
		public static final String TRAVEL_NOT_ID_SEQ = "CUST_TRAVEL_NOT_ID_SEQ";

		public static final String CREATE_TRAVEL_NOTIFICATION = new StringBuilder("INSERT INTO ").append(TABLE_NAME)
				.append(" (CUST_ID,START_DATE,END_DATE,CREDIT_CARDS,COUNTRIES_ID,IS_BACK_TO_KW,CUST_TRAVEL_NOT_ID,DEBIT_CARDS, IS_ENCRYPTED, MOBILE_NO) VALUES (?,?,?,?,?,?,?,?,1,?) ")
				.toString();

		public static final String SELECT_TRAVEL_NOTIFICATION = new StringBuilder(
				"SELECT CUST_ID,START_DATE,END_DATE,CREDIT_CARDS,COUNTRIES_ID,IS_BACK_TO_KW,CUST_TRAVEL_NOT_ID,DEBIT_CARDS, IS_ENCRYPTED, MOBILE_NO FROM ")
						.append(TABLE_NAME).append(" WHERE CUST_ID = ? ").toString();

		public static final String UPDATE_TRAVEL_NOTIFICATION = new StringBuilder("UPDATE ").append(TABLE_NAME).append(
				" SET START_DATE=?,END_DATE=?,CREDIT_CARDS=?,COUNTRIES_ID=?,IS_BACK_TO_KW=?, DEBIT_CARDS=?, IS_ENCRYPTED = 1, MOBILE_NO=? WHERE CUST_ID=?")
				.toString();

		public static final String DELETE_TRAVEL_NOTIFICATION = new StringBuilder("DELETE FROM ").append(TABLE_NAME)
				.append(" WHERE  CUST_ID = ?").toString();

	}

	public static class SHAKE_AND_SAVE {
		private SHAKE_AND_SAVE() {
			throw new IllegalStateException("SHAKE_AND_SAVE class");
		}

		/****************************************
		 * the new structure
		 */
		public static final String SELECT_SHAKE_CONFIG = new StringBuilder(
				"SELECT config.SHAKE_ID,config.SHAKE_SERVICE_ID,details.DETAILS_ID,details.FIELD_ID,field.FIELD_NAME,storage.FIELD_VALUE ")
						.append(" FROM SHAKE_SERVICES_CUSTS_CONFIG config ")
						.append(" INNER JOIN SHAKE_SERVICES_CONFIG_DETAILS details ")
						.append(" ON config.SHAKE_ID = details.SHAKE_ID ")
						.append(" INNER JOIN SHAKE_SERVICES_FIELD_STORAGE storage ")
						.append(" ON details.DETAILS_ID = storage.DETAILS_ID ")
						.append(" INNER JOIN SHAKE_SERVICES_FIELD field ")
						.append(" ON details.FIELD_ID = field.FIELD_ID ")
						.append(" WHERE config.CUST_ID = ?  ORDER BY  config.SHAKE_SERVICE_ID ").toString();

		public static final String SEQ_SHAKE_ID = "SHAKE_ID_SEQ";
		public static final String SEQ_SHAKE_DETAILS_ID = "SHAKE_DETAILS_SEQ";

		public static final String CREATE_SHAKE_CONFIG = new StringBuilder("INSERT INTO ")
				.append(" SHAKE_SERVICES_CUSTS_CONFIG ")
				.append(" ( SHAKE_ID , CUST_ID , SHAKE_SERVICE_ID) VALUES( ? , ? ,? )").toString();

		public static final String CREATE_SHAKE_CONFIG_DETAILS = new StringBuilder("INSERT INTO ")
				.append(" SHAKE_SERVICES_CONFIG_DETAILS ")
				.append(" ( DETAILS_ID , SHAKE_ID , FIELD_ID) VALUES( ? , ? ,? )").toString();

		public static final String CREATE_SHAKE_FIELD_STORAGE = new StringBuilder("INSERT INTO ")
				.append(" SHAKE_SERVICES_FIELD_STORAGE ").append(" ( DETAILS_ID , FIELD_VALUE) VALUES( ? , ? )")
				.toString();

		public static final String SELECT_SHAKE_ID = "SELECT SHAKE_ID FROM SHAKE_SERVICES_CUSTS_CONFIG WHERE CUST_ID = ? AND SHAKE_SERVICE_ID = ? ";
		public static final String DELETE_FIELD_STORAGE_1 = "DELETE SHAKE_SERVICES_FIELD_STORAGE WHERE DETAILS_ID IN (SELECT a. DETAILS_ID FROM SHAKE_SERVICES_CONFIG_DETAILS a , SHAKE_SERVICES_CUSTS_CONFIG b WHERE a.SHAKE_ID = b.SHAKE_ID AND b.CUST_ID = ? AND b.SHAKE_SERVICE_ID = ?)";
		public static final String DELETE_CONFIG_DETAILS_2 = "DELETE SHAKE_SERVICES_CONFIG_DETAILS WHERE SHAKE_ID IN (SELECT SHAKE_ID FROM SHAKE_SERVICES_CUSTS_CONFIG WHERE CUST_ID = ? AND SHAKE_SERVICE_ID = ?)";
		public static final String DELETE_CUSTS_CONFIG_3 = "DELETE SHAKE_SERVICES_CUSTS_CONFIG WHERE  CUST_ID = ? AND SHAKE_SERVICE_ID = ?";
		/****************************************/

	}

	public static class BRANCH_CONFIG {
		private BRANCH_CONFIG() {
			throw new IllegalStateException("BRANCH_CONFIG class");
		}

		public static final String SELECT_BRANCHES = " SELECT BRANCH_CODE, BRANCH_DES, STREET_NAME, AREA_NAME, CITY_NAME, PIN_CODE, MAIN_PHONE, LATITUDE, LONGITUDE, COUNTRY, BRANCH_DES_AR, STREET_NAME_AR, CITY_NAME_AR, AREA_NAME_AR, MOR_WORKING_DAYS_AR, MOR_WORKING_DAYS_EN, MOR_WORKING_HOURS_AR, MOR_WORKING_HOURS_EN, EVEN_WORKING_DAYS_AR, EVEN_WORKING_DAYS_EN, EVEN_WORKING_HOURS_AR, EVEN_WORKING_HOURS_EN, OPTIONS, OPTIONS_IDS, IBEACON_UUID, IBEACON_MAJOR_ID, IBEACON_MINOR_ID, IBEACON_DESC, IBEACON_DESC_AR, IMAL_BRANCH_CODE, BRANCH_TYPE, BRANCH_MAP_DESC_EN, BRANCH_MAP_DESC_AR FROM LOOKUP_BRANCHES_LOCATIONS ";
		public static final String BRANCHES_WHERE_CLAUSE = " WHERE BRANCH_CODE = ? ";
		public static final String UPDATE_BRANCH = " UPDATE LOOKUP_BRANCHES_LOCATIONS SET BRANCH_DES= ?, STREET_NAME=?, AREA_NAME=?, CITY_NAME=?, PIN_CODE=?, MAIN_PHONE=?, LATITUDE=?, LONGITUDE=?, COUNTRY=?, BRANCH_DES_AR=?, STREET_NAME_AR=?, CITY_NAME_AR=?, AREA_NAME_AR=?, MOR_WORKING_DAYS_AR=?, MOR_WORKING_DAYS_EN=?, MOR_WORKING_HOURS_AR=?, MOR_WORKING_HOURS_EN=? , EVEN_WORKING_DAYS_AR=?, EVEN_WORKING_DAYS_EN=?, EVEN_WORKING_HOURS_AR=?, EVEN_WORKING_HOURS_EN=?, OPTIONS = ?, OPTIONS_IDS = ?, IBEACON_UUID = ?, IBEACON_MAJOR_ID = ?, IBEACON_MINOR_ID = ?, IBEACON_DESC = ?, IBEACON_DESC_AR= ? , BRANCH_TYPE =?, IMAL_BRANCH_CODE=? , BRANCH_MAP_DESC_EN=?, BRANCH_MAP_DESC_AR=? ";
		public static final String INSERT_BRANCHE = " INSERT INTO LOOKUP_BRANCHES_LOCATIONS (BRANCH_CODE, BRANCH_DES, STREET_NAME, AREA_NAME, CITY_NAME, PIN_CODE, MAIN_PHONE, LATITUDE, LONGITUDE, COUNTRY, BRANCH_DES_AR, STREET_NAME_AR, CITY_NAME_AR, AREA_NAME_AR, MOR_WORKING_DAYS_AR, MOR_WORKING_DAYS_EN, MOR_WORKING_HOURS_AR, MOR_WORKING_HOURS_EN, EVEN_WORKING_DAYS_AR, EVEN_WORKING_DAYS_EN, EVEN_WORKING_HOURS_AR, EVEN_WORKING_HOURS_EN, OPTIONS, OPTIONS_IDS , IBEACON_UUID, IBEACON_MAJOR_ID, IBEACON_MINOR_ID, IBEACON_DESC, IBEACON_DESC_AR, BRANCH_TYPE, IMAL_BRANCH_CODE, BRANCH_MAP_DESC_EN, BRANCH_MAP_DESC_AR ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?) ";
		public static final String SELECT_BRANCH_DESC_EN = " SELECT COUNT(*) FROM LOOKUP_BRANCHES_LOCATIONS WHERE BRANCH_DES=? AND BRANCH_CODE <> ? ";
		public static final String SELECT_BRANCH_DESC_AR = " SELECT COUNT(*) FROM LOOKUP_BRANCHES_LOCATIONS WHERE BRANCH_DES_AR=? AND BRANCH_CODE <> ? ";

	}

	public static class ATM_LOCATION {
		private ATM_LOCATION() {
			throw new IllegalStateException("ATM_LOCATION class");
		}

		public static final String SELECT_ATM_LOCATIONS = " SELECT * FROM LOOKUP_ATM_LOCATIONS WHERE 1=1 ORDER BY ATM_NAME ";
		public static final String SELECT_ATM_CLAUSE = " SELECT ATM_CODE, ATM_NAME, STREET_NAME, NVL(AREA_NAME, '') AS AREA_NAME, CITY_NAME, PIN_CODE, MAIN_PHONE , LATITUDE, LONGITUDE, NVL(COUNTRY, '') AS COUNTRY, ATM_NAME_AR, STREET_NAME_AR, NVL(AREA_NAME_AR, '') AS AREA_NAME_AR, CITY_NAME_AR, OPTIONS, OPTIONS_IDS, IBEACON_UUID, IBEACON_MAJOR_ID, IBEACON_MINOR_ID, IBEACON_DESC, IBEACON_DESC_AR FROM LOOKUP_ATM_LOCATIONS ";
		public static final String ATM_LOCATIONS_WHERE_CLAUSE = " WHERE ATM_CODE = ? ";
		public static final String SELECT_ATM_NAME_EN = " SELECT COUNT(*) FROM LOOKUP_ATM_LOCATIONS WHERE ATM_NAME=? AND ATM_CODE <> ? ";
		public static final String SELECT_ATM_NAME_AR = " SELECT COUNT(*) FROM LOOKUP_ATM_LOCATIONS WHERE ATM_NAME_AR=? AND ATM_CODE <> ? ";
		public static final String UPDATE_ATM = "UPDATE LOOKUP_ATM_LOCATIONS SET ATM_NAME = ?, STREET_NAME=?, AREA_NAME=?, CITY_NAME=?, PIN_CODE=?, MAIN_PHONE=?, LATITUDE=?, LONGITUDE=?, COUNTRY=?, ATM_NAME_AR=?, STREET_NAME_AR=?, AREA_NAME_AR=?, CITY_NAME_AR=?, OPTIONS=?, OPTIONS_IDS=? , IBEACON_UUID=?, IBEACON_MAJOR_ID=?, IBEACON_MINOR_ID=?, IBEACON_DESC=?, IBEACON_DESC_AR=?";
		public static final String INSERT_ATM = " INSERT INTO LOOKUP_ATM_LOCATIONS ( ATM_CODE, ATM_NAME, STREET_NAME, AREA_NAME, CITY_NAME, PIN_CODE, MAIN_PHONE , LATITUDE, LONGITUDE, COUNTRY, ATM_NAME_AR, STREET_NAME_AR, AREA_NAME_AR, CITY_NAME_AR, OPTIONS, OPTIONS_IDS, IBEACON_UUID, IBEACON_MAJOR_ID, IBEACON_MINOR_ID, IBEACON_DESC, IBEACON_DESC_AR ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?) ";

	}

	public static class usman_SELECT {
		private usman_SELECT() {
			throw new IllegalStateException("usman_SELECT class");
		}

		public static final String SELECT_ALL_usman_REWARDS = " SELECT usman_SELECT_CONFIG.BBYN_SELECT_ID,REWARD_MATRIX_ID,REDEEM_TYPE_ID,PACKAGE_EQUIVALENT_AMOUNT,PACKAGE_POINTS,PACKAGE_NAME_EN,PACKAGE_NAME_AR, "
				+ " REWARD_ICON_URL,REWARD_ICON_SMALL_URL,REWARD_NAME_EN,REWARD_NAME_AR,REGISTRATION_WEBSITE_EN,REGISTRATION_WEBSITE_AR,FIRST_NAME, "
				+ " LAST_NAME,EMAIL,PROGRAM_ACCOUNT_NUMBER,FREQUENT_FLYER_NUMBER FROM usman_SELECT_CONFIG left outer JOIN CUSTS_REWARDS_DATA ON usman_SELECT_CONFIG.BBYN_SELECT_ID = CUSTS_REWARDS_DATA.BBYN_SELECT_ID and CUSTS_REWARDS_DATA.CUST_ID = ? where 1 = 1 ";

		public static final String SELECT_SPECIFIC_usman_REWARDS = " SELECT usman_SELECT_CONFIG.BBYN_SELECT_ID,REWARD_MATRIX_ID,REDEEM_TYPE_ID,PACKAGE_EQUIVALENT_AMOUNT,PACKAGE_POINTS,PACKAGE_NAME_EN,PACKAGE_NAME_AR, "
				+ " REWARD_ICON_URL,REWARD_ICON_SMALL_URL,REWARD_NAME_EN,REWARD_NAME_AR,REGISTRATION_WEBSITE_EN,REGISTRATION_WEBSITE_AR,FIRST_NAME, "
				+ " LAST_NAME,EMAIL,PROGRAM_ACCOUNT_NUMBER,FREQUENT_FLYER_NUMBER FROM usman_SELECT_CONFIG left outer JOIN CUSTS_REWARDS_DATA ON usman_SELECT_CONFIG.BBYN_SELECT_ID = CUSTS_REWARDS_DATA.BBYN_SELECT_ID and CUSTS_REWARDS_DATA.CUST_ID = ? where REDEEM_TYPE_ID = ? ";

		public static final String SELECT_ALL_REWARD_PACKAGES = " SELECT BBYN_SELECT_ID,REWARD_MATRIX_ID,REDEEM_TYPE_ID,PACKAGE_EQUIVALENT_AMOUNT,PACKAGE_POINTS,PACKAGE_NAME_EN,PACKAGE_NAME_AR , "
				+ " REWARD_ICON_URL,REWARD_ICON_SMALL_URL,REWARD_NAME_EN,REWARD_NAME_AR,REGISTRATION_WEBSITE_EN,REGISTRATION_WEBSITE_AR FROM usman_SELECT_CONFIG where 1 = 1 ";

		public static final String SELECT_SPECIFIC_REWARD_PACKAGES = " SELECT BBYN_SELECT_ID,REWARD_MATRIX_ID,REDEEM_TYPE_ID,PACKAGE_EQUIVALENT_AMOUNT,PACKAGE_POINTS,PACKAGE_NAME_EN,PACKAGE_NAME_AR , "
				+ " REWARD_ICON_URL,REWARD_ICON_SMALL_URL,REWARD_NAME_EN,REWARD_NAME_AR,REGISTRATION_WEBSITE_EN,REGISTRATION_WEBSITE_AR FROM usman_SELECT_CONFIG where REWARD_MATRIX_ID = ? ";

		public static final String SELECT_REWARD_CUSTOMER_LOYAL_DETAILS = " SELECT usman_SELECT_CONFIG.BBYN_SELECT_ID,REWARD_MATRIX_ID,REDEEM_TYPE_ID,PACKAGE_EQUIVALENT_AMOUNT,PACKAGE_POINTS,PACKAGE_NAME_EN,PACKAGE_NAME_AR,REWARD_ICON_URL,"
				+ " REWARD_ICON_SMALL_URL,REWARD_NAME_EN,REWARD_NAME_AR,REGISTRATION_WEBSITE_EN,REGISTRATION_WEBSITE_AR,FIRST_NAME,LAST_NAME,EMAIL,"
				+ " PROGRAM_ACCOUNT_NUMBER,FREQUENT_FLYER_NUMBER from CUSTS_REWARDS_DATA INNER JOIN usman_SELECT_CONFIG ON usman_SELECT_CONFIG.BBYN_SELECT_ID = CUSTS_REWARDS_DATA.BBYN_SELECT_ID where CUSTS_REWARDS_DATA.CUST_ID = ? and usman_SELECT_CONFIG.REWARD_MATRIX_ID = ? ";
	}
}
